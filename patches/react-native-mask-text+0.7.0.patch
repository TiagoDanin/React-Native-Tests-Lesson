diff --git a/node_modules/react-native-mask-text/lib/commonjs/@types/MaskOptions.js.map b/node_modules/react-native-mask-text/lib/commonjs/@types/MaskOptions.js.map
index 9ffd4b2..5d6f0e2 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/@types/MaskOptions.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/@types/MaskOptions.js.map
@@ -1 +1 @@
-{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":[]}
\ No newline at end of file
+{"version":3,"names":[],"sources":["MaskOptions.ts"],"sourcesContent":["export interface MaskOptions {\n  prefix?: string\n  decimalSeparator?: string\n  groupSeparator?: string\n  precision?: number\n  groupSize?: number\n  secondaryGroupSize?: number\n  fractionGroupSeparator?: string\n  fractionGroupSize?: number\n  suffix?: string\n}\n"],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.js.map b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.js.map
index 4352621..c8cc88b 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedText.tsx"],"names":["MaskedText","children","text","mask","pattern","type","options","rest"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAUO,SAASA,UAAT,OAMsC;AAAA,MANlB;AACzBC,IAAAA,QAAQ,EAAEC,IADe;AAEzBC,IAAAA,IAAI,EAAEC,OAAO,GAAG,EAFS;AAGzBC,IAAAA,IAAI,GAAG,QAHkB;AAIzBC,IAAAA,OAAO,GAAG,EAJe;AAKzB,OAAGC;AALsB,GAMkB;AAC3C,sBAAO,6BAAC,iBAAD,EAAUA,IAAV,EAAiB,gBAAKL,IAAL,EAAWE,OAAX,EAAoBC,IAApB,EAA0BC,OAA1B,CAAjB,CAAP;AACD","sourcesContent":["import React from 'react'\nimport { Text, TextProps } from 'react-native'\nimport { mask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\nexport interface MaskedTextProps {\n  children: string\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n}\n\nexport function MaskedText({\n  children: text,\n  mask: pattern = '',\n  type = 'custom',\n  options = {} as MaskOptions,\n  ...rest\n}: MaskedTextProps & TextProps): JSX.Element {\n  return <Text {...rest}>{mask(text, pattern, type, options)}</Text>;\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["MaskedText","children","text","mask","pattern","type","options","rest"],"sources":["MaskedText.tsx"],"sourcesContent":["import React from 'react'\nimport { Text, TextProps } from 'react-native'\nimport { mask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\nexport interface MaskedTextProps {\n  children: string\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n}\n\nexport function MaskedText({\n  children: text,\n  mask: pattern = '',\n  type = 'custom',\n  options = {} as MaskOptions,\n  ...rest\n}: MaskedTextProps & TextProps): JSX.Element {\n  return <Text {...rest}>{mask(text, pattern, type, options)}</Text>;\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAUO,SAASA,UAAT,OAMsC;EAAA,IANlB;IACzBC,QAAQ,EAAEC,IADe;IAEzBC,IAAI,EAAEC,OAAO,GAAG,EAFS;IAGzBC,IAAI,GAAG,QAHkB;IAIzBC,OAAO,GAAG,EAJe;IAKzB,GAAGC;EALsB,CAMkB;EAC3C,oBAAO,6BAAC,iBAAD,EAAUA,IAAV,EAAiB,IAAAJ,UAAA,EAAKD,IAAL,EAAWE,OAAX,EAAoBC,IAApB,EAA0BC,OAA1B,CAAjB,CAAP;AACD"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.test.js.map b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.test.js.map
index 4d2d4d9..f7dd25d 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.test.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedText.test.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedText.test.tsx"],"names":["describe","test","container","expect","getByText","toBeTruthy","toMatchSnapshot","prefix","decimalSeparator","groupSeparator","precision"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,IAAI,CAAC,2CAAD,EAA8C,MAAM;AACtD,UAAMC,SAAS,GAAG,uCAAO,6BAAC,sBAAD;AAAY,MAAA,IAAI,EAAC;AAAjB,gBAAP,CAAlB;AAEAC,IAAAA,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,SAApB,CAAD,CAAN,CAAuCC,UAAvC;AAEAF,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;AACD,GANG,CAAJ;AAQAL,EAAAA,IAAI,CAAC,6CAAD,EAAgD,MAAM;AACxD,UAAMC,SAAS,GAAG,uCAChB,6BAAC,sBAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAE;AACPK,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ;AAFX,cADgB,CAAlB;AAcAP,IAAAA,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,QAApB,CAAD,CAAN,CAAsCC,UAAtC;AAEAF,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;AACD,GAlBG,CAAJ;AAmBD,CA5BO,CAAR","sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react-native';\nimport { MaskedText } from './MaskedText';\n\ndescribe('<MaskedText />', () => {\n  test('should renders correctly with custom mask', () => {\n    const container = render(<MaskedText mask=\"AAA-999\">RCT777</MaskedText>);\n\n    expect(container.getByText('RCT-777')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedText\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n      >\n        5999\n      </MaskedText>\n    );\n\n    expect(container.getByText('$59.99')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n});\n"]}
\ No newline at end of file
+{"version":3,"names":["describe","test","container","render","expect","getByText","toBeTruthy","toMatchSnapshot","prefix","decimalSeparator","groupSeparator","precision"],"sources":["MaskedText.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react-native';\nimport { MaskedText } from './MaskedText';\n\ndescribe('<MaskedText />', () => {\n  test('should renders correctly with custom mask', () => {\n    const container = render(<MaskedText mask=\"AAA-999\">RCT777</MaskedText>);\n\n    expect(container.getByText('RCT-777')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedText\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n      >\n        5999\n      </MaskedText>\n    );\n\n    expect(container.getByText('$59.99')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BC,IAAI,CAAC,2CAAD,EAA8C,MAAM;IACtD,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAAO,6BAAC,sBAAD;MAAY,IAAI,EAAC;IAAjB,YAAP,CAAlB;IAEAC,MAAM,CAACF,SAAS,CAACG,SAAV,CAAoB,SAApB,CAAD,CAAN,CAAuCC,UAAvC;IAEAF,MAAM,CAACF,SAAD,CAAN,CAAkBK,eAAlB;EACD,CANG,CAAJ;EAQAN,IAAI,CAAC,6CAAD,EAAgD,MAAM;IACxD,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAChB,6BAAC,sBAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPK,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ;IAFX,UADgB,CAAlB;IAcAP,MAAM,CAACF,SAAS,CAACG,SAAV,CAAoB,QAApB,CAAD,CAAN,CAAsCC,UAAtC;IAEAF,MAAM,CAACF,SAAD,CAAN,CAAkBK,eAAlB;EACD,CAlBG,CAAJ;AAmBD,CA5BO,CAAR"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js
index 35dbab0..40fc327 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js
+++ b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js
@@ -24,13 +24,18 @@ const MaskedTextInputComponent = (_ref, ref) => {
     options = {},
     defaultValue,
     onChangeText,
-    inputAccessoryView,
+    value,
     ...rest
   } = _ref;
+
+  const getMaskedValue = value => (0, _mask.mask)(value, pattern, type, options);
+
+  const getUnMaskedValue = value => (0, _mask.unMask)(value, type);
+
   const defaultValueCustom = defaultValue || '';
   const defaultValueCurrency = defaultValue || '0';
-  const initialMaskedValue = type === 'currency' ? (0, _mask.mask)(defaultValueCurrency, pattern, type, options) : (0, _mask.mask)(defaultValueCustom, pattern, type, options);
-  const initialUnMaskedValue = type === 'currency' ? (0, _mask.unMask)(defaultValueCurrency, type) : (0, _mask.unMask)(defaultValueCustom, type);
+  const initialMaskedValue = getMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);
+  const initialUnMaskedValue = getUnMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);
   const [maskedValue, setMaskedValue] = (0, _react.useState)(initialMaskedValue);
   const [unMaskedValue, setUnmaskedValue] = (0, _react.useState)(initialUnMaskedValue);
 
@@ -44,12 +49,20 @@ const MaskedTextInputComponent = (_ref, ref) => {
   (0, _react.useEffect)(() => {
     onChangeText(maskedValue, unMaskedValue);
   }, [maskedValue, unMaskedValue]);
-  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, _extends({
+  (0, _react.useEffect)(() => {
+    if (value) {
+      setMaskedValue(getMaskedValue(value));
+      setUnmaskedValue(getUnMaskedValue(value));
+    } else {
+      setMaskedValue(initialMaskedValue);
+      setUnmaskedValue(initialUnMaskedValue);
+    }
+  }, [value]);
+  return /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, _extends({
     onChangeText: value => onChange(value),
+    value: maskedValue,
     ref: ref
-  }, rest, {
-    value: maskedValue
-  })), inputAccessoryView);
+  }, rest));
 };
 
 exports.MaskedTextInputComponent = MaskedTextInputComponent;
diff --git a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js.map b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js.map
index 11a236d..74be1b1 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedTextInput.tsx"],"names":["MaskedTextInputComponent","ref","mask","pattern","type","options","defaultValue","onChangeText","inputAccessoryView","rest","defaultValueCustom","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","maskedValue","setMaskedValue","unMaskedValue","setUnmaskedValue","onChange","value","newUnMaskedValue","newMaskedValue","MaskedTextInput"],"mappings":";;;;;;;AAAA;;AAMA;;AACA;;;;;;;;AAcO,MAAMA,wBAGZ,GAAG,OAUFC,GAVE,KAWc;AAAA,MAVhB;AACEC,IAAAA,IAAI,EAAEC,OAAO,GAAG,EADlB;AAEEC,IAAAA,IAAI,GAAG,QAFT;AAGEC,IAAAA,OAAO,GAAG,EAHZ;AAIEC,IAAAA,YAJF;AAKEC,IAAAA,YALF;AAMEC,IAAAA,kBANF;AAOE,OAAGC;AAPL,GAUgB;AAChB,QAAMC,kBAAkB,GAAGJ,YAAY,IAAI,EAA3C;AACA,QAAMK,oBAAoB,GAAGL,YAAY,IAAI,GAA7C;AAEA,QAAMM,kBAAkB,GAAMR,IAAI,KAAK,UAAT,GACxB,gBAAKO,oBAAL,EAA2BR,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,CADwB,GAExB,gBAAKK,kBAAL,EAAyBP,OAAzB,EAAkCC,IAAlC,EAAwCC,OAAxC,CAFN;AAIA,QAAMQ,oBAAoB,GAAMT,IAAI,KAAK,UAAT,GAC1B,kBAAOO,oBAAP,EAA6BP,IAA7B,CAD0B,GAE1B,kBAAOM,kBAAP,EAA2BN,IAA3B,CAFN;AAIA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgC,qBAASH,kBAAT,CAAtC;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoC,qBAASJ,oBAAT,CAA1C;;AAEA,WAASK,QAAT,CAAkBC,KAAlB,EAAiC;AAC/B,UAAMC,gBAAgB,GAAG,kBAAOD,KAAP,EAAcf,IAAd,CAAzB;AACA,UAAMiB,cAAc,GAAG,gBAAKD,gBAAL,EAAuBjB,OAAvB,EAAgCC,IAAhC,EAAsCC,OAAtC,CAAvB;AAEAU,IAAAA,cAAc,CAACM,cAAD,CAAd;AACAJ,IAAAA,gBAAgB,CAACG,gBAAD,CAAhB;AACD;;AAED,wBAAU,MAAM;AACdb,IAAAA,YAAY,CAACO,WAAD,EAAcE,aAAd,CAAZ;AACD,GAFD,EAEG,CAACF,WAAD,EAAcE,aAAd,CAFH;AAIA,sBACE,yEACE,6BAAC,sBAAD;AACE,IAAA,YAAY,EAAGG,KAAD,IAAWD,QAAQ,CAACC,KAAD,CADnC;AAEE,IAAA,GAAG,EAAElB;AAFP,KAGMQ,IAHN;AAIE,IAAA,KAAK,EAAEK;AAJT,KADF,EAOGN,kBAPH,CADF;AAWD,CApDM;;;AAsDA,MAAMc,eAAe,gBAAG,uBAAWtB,wBAAX,CAAxB","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\n\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n  inputAccessoryView?: JSX.Element;\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    inputAccessoryView,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialMaskedValue =    type === 'currency'\n      ? mask(defaultValueCurrency, pattern, type, options)\n      : mask(defaultValueCustom, pattern, type, options);\n\n  const initialUnMaskedValue =    type === 'currency'\n      ? unMask(defaultValueCurrency, type)\n      : unMask(defaultValueCustom, type);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  return (\n    <>\n      <TextInput\n        onChangeText={(value) => onChange(value)}\n        ref={ref}\n        {...rest}\n        value={maskedValue}\n      />\n      {inputAccessoryView}\n    </>\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"]}
\ No newline at end of file
+{"version":3,"names":["MaskedTextInputComponent","ref","mask","pattern","type","options","defaultValue","onChangeText","value","rest","getMaskedValue","getUnMaskedValue","unMask","defaultValueCustom","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","maskedValue","setMaskedValue","useState","unMaskedValue","setUnmaskedValue","onChange","newUnMaskedValue","newMaskedValue","useEffect","MaskedTextInput","forwardRef"],"sources":["MaskedTextInput.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\n\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    value,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const getMaskedValue = (value: string) => mask(value, pattern, type, options);\n  const getUnMaskedValue = (value: string) => unMask(value, type);\n\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialMaskedValue = getMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);\n\n  const initialUnMaskedValue = getUnMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  useEffect(() => {\n    if (value) {\n      setMaskedValue(getMaskedValue(value));\n      setUnmaskedValue(getUnMaskedValue(value));\n    } else {\n      setMaskedValue(initialMaskedValue);\n      setUnmaskedValue(initialUnMaskedValue);\n    }\n  }, [value])\n\n  return (\n    <TextInput\n      onChangeText={(value) => onChange(value)}\n      value={maskedValue}\n      ref={ref}\n      {...rest}\n    />\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"],"mappings":";;;;;;;AAAA;;AAMA;;AACA;;;;;;;;AAaO,MAAMA,wBAGZ,GAAG,OAUFC,GAVE,KAWc;EAAA,IAVhB;IACEC,IAAI,EAAEC,OAAO,GAAG,EADlB;IAEEC,IAAI,GAAG,QAFT;IAGEC,OAAO,GAAG,EAHZ;IAIEC,YAJF;IAKEC,YALF;IAMEC,KANF;IAOE,GAAGC;EAPL,CAUgB;;EAChB,MAAMC,cAAc,GAAIF,KAAD,IAAmB,IAAAN,UAAA,EAAKM,KAAL,EAAYL,OAAZ,EAAqBC,IAArB,EAA2BC,OAA3B,CAA1C;;EACA,MAAMM,gBAAgB,GAAIH,KAAD,IAAmB,IAAAI,YAAA,EAAOJ,KAAP,EAAcJ,IAAd,CAA5C;;EAEA,MAAMS,kBAAkB,GAAGP,YAAY,IAAI,EAA3C;EACA,MAAMQ,oBAAoB,GAAGR,YAAY,IAAI,GAA7C;EAEA,MAAMS,kBAAkB,GAAGL,cAAc,CAACN,IAAI,KAAK,UAAT,GAAsBU,oBAAtB,GAA6CD,kBAA9C,CAAzC;EAEA,MAAMG,oBAAoB,GAAGL,gBAAgB,CAACP,IAAI,KAAK,UAAT,GAAsBU,oBAAtB,GAA6CD,kBAA9C,CAA7C;EAEA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgC,IAAAC,eAAA,EAASJ,kBAAT,CAAtC;EACA,MAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoC,IAAAF,eAAA,EAASH,oBAAT,CAA1C;;EAEA,SAASM,QAAT,CAAkBd,KAAlB,EAAiC;IAC/B,MAAMe,gBAAgB,GAAG,IAAAX,YAAA,EAAOJ,KAAP,EAAcJ,IAAd,CAAzB;IACA,MAAMoB,cAAc,GAAG,IAAAtB,UAAA,EAAKqB,gBAAL,EAAuBpB,OAAvB,EAAgCC,IAAhC,EAAsCC,OAAtC,CAAvB;IAEAa,cAAc,CAACM,cAAD,CAAd;IACAH,gBAAgB,CAACE,gBAAD,CAAhB;EACD;;EAED,IAAAE,gBAAA,EAAU,MAAM;IACdlB,YAAY,CAACU,WAAD,EAAcG,aAAd,CAAZ;EACD,CAFD,EAEG,CAACH,WAAD,EAAcG,aAAd,CAFH;EAIA,IAAAK,gBAAA,EAAU,MAAM;IACd,IAAIjB,KAAJ,EAAW;MACTU,cAAc,CAACR,cAAc,CAACF,KAAD,CAAf,CAAd;MACAa,gBAAgB,CAACV,gBAAgB,CAACH,KAAD,CAAjB,CAAhB;IACD,CAHD,MAGO;MACLU,cAAc,CAACH,kBAAD,CAAd;MACAM,gBAAgB,CAACL,oBAAD,CAAhB;IACD;EACF,CARD,EAQG,CAACR,KAAD,CARH;EAUA,oBACE,6BAAC,sBAAD;IACE,YAAY,EAAGA,KAAD,IAAWc,QAAQ,CAACd,KAAD,CADnC;IAEE,KAAK,EAAES,WAFT;IAGE,GAAG,EAAEhB;EAHP,GAIMQ,IAJN,EADF;AAQD,CA1DM;;;AA4DA,MAAMiB,eAAe,gBAAG,IAAAC,iBAAA,EAAW3B,wBAAX,CAAxB"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js
index 5046361..9050756 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js
+++ b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js
@@ -6,8 +6,6 @@ var _reactNative = require("@testing-library/react-native");
 
 var _MaskedTextInput = require("./MaskedTextInput");
 
-var _reactNative2 = require("react-native");
-
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
 describe('<MaskedTextInput />', () => {
@@ -72,27 +70,5 @@ describe('<MaskedTextInput />', () => {
       expect(container.getByDisplayValue('$59.99')).toBeTruthy();
     });
   });
-  test('should renders correctly with an accessory view', () => {
-    const container = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_MaskedTextInput.MaskedTextInput, {
-      type: "currency",
-      options: {
-        prefix: '$',
-        decimalSeparator: '.',
-        groupSeparator: ',',
-        precision: 2
-      },
-      onChangeText: mockedOnChangeText,
-      inputAccessoryViewID: "Done",
-      inputAccessoryView: /*#__PURE__*/_react.default.createElement(_reactNative2.InputAccessoryView, {
-        nativeID: "Done"
-      }, /*#__PURE__*/_react.default.createElement(_reactNative2.Button, {
-        onPress: () => _reactNative2.Keyboard.dismiss(),
-        title: "Clear text"
-      }))
-    }));
-    const tree = container.toJSON();
-    expect(tree[0].props.inputAccessoryViewID).toBe('Done');
-    expect(tree[1].props.nativeID).toBe('Done');
-  });
 });
 //# sourceMappingURL=MaskedTextInput.test.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js.map b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js.map
index c420a1a..ffc5e8d 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/components/MaskedTextInput.test.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedTextInput.test.tsx"],"names":["describe","mockedOnChangeText","jest","fn","test","container","expect","toMatchSnapshot","getByDisplayValue","toBeTruthy","prefix","decimalSeparator","groupSeparator","precision","fireEvent","changeText","getByTestId","Keyboard","dismiss","tree","toJSON","props","inputAccessoryViewID","toBe","nativeID"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAGAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpC,QAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAL,EAA3B;AAEAC,EAAAA,IAAI,CAAC,2CAAD,EAA8C,MAAM;AACtD,UAAMC,SAAS,GAAG,uCAChB,6BAAC,gCAAD;AAAiB,MAAA,IAAI,EAAC,SAAtB;AAAgC,MAAA,YAAY,EAAEJ;AAA9C,MADgB,CAAlB;AAGAK,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;AACD,GALG,CAAJ;AAOAH,EAAAA,IAAI,CAAC,yDAAD,EAA4D,MAAM;AACpE,UAAMC,SAAS,GAAG,uCAChB,6BAAC,gCAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,YAAY,EAAEJ,kBAFhB;AAGE,MAAA,YAAY,EAAC;AAHf,MADgB,CAAlB;AAOAK,IAAAA,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;AACD,GATG,CAAJ;AAWAL,EAAAA,IAAI,CAAC,6CAAD,EAAgD,MAAM;AACxD,UAAMC,SAAS,GAAG,uCAChB,6BAAC,gCAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAE;AACPK,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ,OAFX;AAQE,MAAA,YAAY,EAAEZ;AARhB,MADgB,CAAlB;AAYAK,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;AACD,GAdG,CAAJ;AAgBAH,EAAAA,IAAI,CAAC,yCAAD,EAA4C,YAAY;AAC1D,UAAMC,SAAS,GAAG,uCAChB,6BAAC,gCAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,YAAY,EAAEJ,kBAFhB;AAGE,MAAA,MAAM,EAAC;AAHT,MADgB,CAAlB;;AAQAa,2BAAUC,UAAV,CAAqBV,SAAS,CAACW,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,QAAjE;;AAEA,UAAM,0BAAQ,MAAM;AAClBV,MAAAA,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;AACD,KAFK,CAAN;AAGD,GAdG,CAAJ;AAgBAL,EAAAA,IAAI,CAAC,2CAAD,EAA8C,YAAY;AAC5D,UAAMC,SAAS,GAAG,uCAChB,6BAAC,gCAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAE;AACPK,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ,OAFX;AAQE,MAAA,YAAY,EAAEZ,kBARhB;AASE,MAAA,MAAM,EAAC;AATT,MADgB,CAAlB;;AAcAa,2BAAUC,UAAV,CAAqBV,SAAS,CAACW,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,MAAjE;;AAEA,UAAM,0BAAQ,MAAM;AAClBV,MAAAA,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,QAA5B,CAAD,CAAN,CAA8CC,UAA9C;AACD,KAFK,CAAN;AAGD,GApBG,CAAJ;AAsBAL,EAAAA,IAAI,CAAC,iDAAD,EAAoD,MAAM;AAC5D,UAAMC,SAAS,GAAG,uCAChB,6BAAC,gCAAD;AACA,MAAA,IAAI,EAAC,UADL;AAEA,MAAA,OAAO,EAAE;AACPK,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ,OAFT;AAQA,MAAA,YAAY,EAAEZ,kBARd;AASA,MAAA,oBAAoB,EAAC,MATrB;AAUA,MAAA,kBAAkB,eAChB,6BAAC,gCAAD;AAAoB,QAAA,QAAQ,EAAC;AAA7B,sBACA,6BAAC,oBAAD;AACE,QAAA,OAAO,EAAE,MAAMgB,uBAASC,OAAT,EADjB;AAEE,QAAA,KAAK,EAAC;AAFR,QADA;AAXF,MADgB,CAAlB;AAsBA,UAAMC,IAAI,GAAGd,SAAS,CAACe,MAAV,EAAb;AACAd,IAAAA,MAAM,CAACa,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAcC,oBAAf,CAAN,CAA2CC,IAA3C,CAAgD,MAAhD;AACAjB,IAAAA,MAAM,CAACa,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAcG,QAAf,CAAN,CAA+BD,IAA/B,CAAoC,MAApC;AACD,GA1BG,CAAJ;AA2BD,CAtGO,CAAR","sourcesContent":["import React from 'react'\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { MaskedTextInput } from './MaskedTextInput';\nimport { Button, Keyboard, InputAccessoryView } from 'react-native';\n\n\ndescribe('<MaskedTextInput />', () => {\n  const mockedOnChangeText = jest.fn();\n\n  test('should renders correctly with custom mask', () => {\n    const container = render(\n      <MaskedTextInput mask=\"AAA-999\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with custom mask default value', () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        defaultValue=\"ABC-123\"\n      />\n    );\n    expect(container.getByDisplayValue('ABC-123')).toBeTruthy()\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n      />\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should mask input text with custom mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'RCT777')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('RCT-777')).toBeTruthy()\n    })\n  });\n\n  test('should mask input text with currency mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), '5999')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('$59.99')).toBeTruthy()\n    })\n  });\n\n  test('should renders correctly with an accessory view', () => {\n    const container = render(\n      <MaskedTextInput         \n      type=\"currency\"\n      options={{\n        prefix: '$',\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        precision: 2,\n      }} \n      onChangeText={mockedOnChangeText} \n      inputAccessoryViewID='Done'\n      inputAccessoryView={\n        <InputAccessoryView nativeID='Done'>\n        <Button\n          onPress={() => Keyboard.dismiss()}\n          title=\"Clear text\"\n        />\n        </InputAccessoryView>\n      }\n      />,\n    );\n\n    const tree = container.toJSON();\n    expect(tree[0].props.inputAccessoryViewID).toBe('Done');\n    expect(tree[1].props.nativeID).toBe('Done');\n  });\n});\n"]}
\ No newline at end of file
+{"version":3,"names":["describe","mockedOnChangeText","jest","fn","test","container","render","expect","toMatchSnapshot","getByDisplayValue","toBeTruthy","prefix","decimalSeparator","groupSeparator","precision","fireEvent","changeText","getByTestId","waitFor"],"sources":["MaskedTextInput.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { MaskedTextInput } from './MaskedTextInput';\n\ndescribe('<MaskedTextInput />', () => {\n  const mockedOnChangeText = jest.fn();\n\n  test('should renders correctly with custom mask', () => {\n    const container = render(\n      <MaskedTextInput mask=\"AAA-999\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with custom mask default value', () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        defaultValue=\"ABC-123\"\n      />\n    );\n    expect(container.getByDisplayValue('ABC-123')).toBeTruthy()\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n      />\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should mask input text with custom mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'RCT777')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('RCT-777')).toBeTruthy()\n    })\n  });\n\n  test('should mask input text with currency mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), '5999')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('$59.99')).toBeTruthy()\n    })\n  });\n});\n"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;EACpC,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAL,EAA3B;EAEAC,IAAI,CAAC,2CAAD,EAA8C,MAAM;IACtD,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAChB,6BAAC,gCAAD;MAAiB,IAAI,EAAC,SAAtB;MAAgC,YAAY,EAAEL;IAA9C,EADgB,CAAlB;IAGAM,MAAM,CAACF,SAAD,CAAN,CAAkBG,eAAlB;EACD,CALG,CAAJ;EAOAJ,IAAI,CAAC,yDAAD,EAA4D,MAAM;IACpE,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAChB,6BAAC,gCAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEL,kBAFhB;MAGE,YAAY,EAAC;IAHf,EADgB,CAAlB;IAOAM,MAAM,CAACF,SAAS,CAACI,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;EACD,CATG,CAAJ;EAWAN,IAAI,CAAC,6CAAD,EAAgD,MAAM;IACxD,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAChB,6BAAC,gCAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPK,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFX;MAQE,YAAY,EAAEb;IARhB,EADgB,CAAlB;IAYAM,MAAM,CAACF,SAAD,CAAN,CAAkBG,eAAlB;EACD,CAdG,CAAJ;EAgBAJ,IAAI,CAAC,yCAAD,EAA4C,YAAY;IAC1D,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAChB,6BAAC,gCAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEL,kBAFhB;MAGE,MAAM,EAAC;IAHT,EADgB,CAAlB;;IAQAc,sBAAA,CAAUC,UAAV,CAAqBX,SAAS,CAACY,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,QAAjE;;IAEA,MAAM,IAAAC,oBAAA,EAAQ,MAAM;MAClBX,MAAM,CAACF,SAAS,CAACI,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;IACD,CAFK,CAAN;EAGD,CAdG,CAAJ;EAgBAN,IAAI,CAAC,2CAAD,EAA8C,YAAY;IAC5D,MAAMC,SAAS,GAAG,IAAAC,mBAAA,gBAChB,6BAAC,gCAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPK,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFX;MAQE,YAAY,EAAEb,kBARhB;MASE,MAAM,EAAC;IATT,EADgB,CAAlB;;IAcAc,sBAAA,CAAUC,UAAV,CAAqBX,SAAS,CAACY,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,MAAjE;;IAEA,MAAM,IAAAC,oBAAA,EAAQ,MAAM;MAClBX,MAAM,CAACF,SAAS,CAACI,iBAAV,CAA4B,QAA5B,CAAD,CAAN,CAA8CC,UAA9C;IACD,CAFK,CAAN;EAGD,CApBG,CAAJ;AAqBD,CA1EO,CAAR"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/index.js.map b/node_modules/react-native-mask-text/lib/commonjs/index.js.map
index ed01365..86d69d1 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/index.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAKA","sourcesContent":["import { MaskedText, MaskedTextProps } from './components/MaskedText'\nimport {\n  MaskedTextInput,\n  MaskedTextInputProps,\n} from './components/MaskedTextInput'\n\nimport { mask, unMask } from './utils/mask'\n\nexport { MaskedText, MaskedTextInput, mask, unMask }\n\nexport type { MaskedTextProps, MaskedTextInputProps }\n"]}
\ No newline at end of file
+{"version":3,"names":[],"sources":["index.ts"],"sourcesContent":["import { MaskedText, MaskedTextProps } from './components/MaskedText'\nimport {\n  MaskedTextInput,\n  MaskedTextInputProps,\n} from './components/MaskedTextInput'\n\nimport { mask, unMask } from './utils/mask'\n\nexport { MaskedText, MaskedTextInput, mask, unMask }\n\nexport type { MaskedTextProps, MaskedTextInputProps }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAKA"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/utils/addPlaceholder.js.map b/node_modules/react-native-mask-text/lib/commonjs/utils/addPlaceholder.js.map
index b625eae..eb2e327 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/utils/addPlaceholder.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/utils/addPlaceholder.js.map
@@ -1 +1 @@
-{"version":3,"sources":["addPlaceholder.ts"],"names":["addPlaceholder","output","index","placeholder","newIndex","length","DIGIT","ALPHA","ALPHANUM"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CACEC,MADF,EAEEC,KAFF,EAGEC,WAHF,EAIY;AACV,OAAK,IAAIC,QAAQ,GAAGF,KAApB,EAA2BE,QAAQ,GAAGH,MAAM,CAACI,MAA7C,EAAqDD,QAAQ,EAA7D,EAAiE;AAC/D,QACEH,MAAM,CAACG,QAAD,CAAN,KAAqBE,gBAArB,IACAL,MAAM,CAACG,QAAD,CAAN,KAAqBG,gBADrB,IAEAN,MAAM,CAACG,QAAD,CAAN,KAAqBI,mBAHvB,EAIE;AACA;AACAP,MAAAA,MAAM,CAACG,QAAD,CAAN,GAAmBD,WAAnB;AACD;AACF;;AACD,SAAOF,MAAP;AACD;;eAEcD,c","sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\n\n/**\n * function addPlaceholder\n * @param {string[]} output\n * @param {number} index\n * @param {string} placeholder\n * @returns {string[]}\n */\nfunction addPlaceholder(\n  output: string[],\n  index: number,\n  placeholder: string\n): string[] {\n  for (let newIndex = index; newIndex < output.length; newIndex++) {\n    if (\n      output[newIndex] === DIGIT ||\n      output[newIndex] === ALPHA ||\n      output[newIndex] === ALPHANUM\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      output[newIndex] = placeholder\n    }\n  }\n  return output\n}\n\nexport default addPlaceholder\n"]}
\ No newline at end of file
+{"version":3,"names":["addPlaceholder","output","index","placeholder","newIndex","length","DIGIT","ALPHA","ALPHANUM"],"sources":["addPlaceholder.ts"],"sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\n\n/**\n * function addPlaceholder\n * @param {string[]} output\n * @param {number} index\n * @param {string} placeholder\n * @returns {string[]}\n */\nfunction addPlaceholder(\n  output: string[],\n  index: number,\n  placeholder: string\n): string[] {\n  for (let newIndex = index; newIndex < output.length; newIndex++) {\n    if (\n      output[newIndex] === DIGIT ||\n      output[newIndex] === ALPHA ||\n      output[newIndex] === ALPHANUM\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      output[newIndex] = placeholder\n    }\n  }\n  return output\n}\n\nexport default addPlaceholder\n"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CACEC,MADF,EAEEC,KAFF,EAGEC,WAHF,EAIY;EACV,KAAK,IAAIC,QAAQ,GAAGF,KAApB,EAA2BE,QAAQ,GAAGH,MAAM,CAACI,MAA7C,EAAqDD,QAAQ,EAA7D,EAAiE;IAC/D,IACEH,MAAM,CAACG,QAAD,CAAN,KAAqBE,gBAArB,IACAL,MAAM,CAACG,QAAD,CAAN,KAAqBG,gBADrB,IAEAN,MAAM,CAACG,QAAD,CAAN,KAAqBI,mBAHvB,EAIE;MACA;MACAP,MAAM,CAACG,QAAD,CAAN,GAAmBD,WAAnB;IACD;EACF;;EACD,OAAOF,MAAP;AACD;;eAEcD,c"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/utils/constants.js.map b/node_modules/react-native-mask-text/lib/commonjs/utils/constants.js.map
index f3f850a..3dc2e74 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/utils/constants.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/utils/constants.js.map
@@ -1 +1 @@
-{"version":3,"sources":["constants.ts"],"names":["DIGIT","ALPHA","ALPHANUM"],"mappings":";;;;;;AAAO,MAAMA,KAAK,GAAG,GAAd;;AACA,MAAMC,KAAK,GAAG,GAAd;;AACA,MAAMC,QAAQ,GAAG,GAAjB","sourcesContent":["export const DIGIT = \"9\";\nexport const ALPHA = \"A\";\nexport const ALPHANUM = \"S\";\n"]}
\ No newline at end of file
+{"version":3,"names":["DIGIT","ALPHA","ALPHANUM"],"sources":["constants.ts"],"sourcesContent":["export const DIGIT = \"9\";\nexport const ALPHA = \"A\";\nexport const ALPHANUM = \"S\";\n"],"mappings":";;;;;;AAAO,MAAMA,KAAK,GAAG,GAAd;;AACA,MAAMC,KAAK,GAAG,GAAd;;AACA,MAAMC,QAAQ,GAAG,GAAjB"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/utils/mask.js.map b/node_modules/react-native-mask-text/lib/commonjs/utils/mask.js.map
index 04b0f60..19b1005 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/utils/mask.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/utils/mask.js.map
@@ -1 +1 @@
-{"version":3,"sources":["mask.ts"],"names":["unMask","value","type","unMaskedValue","replace","number","parseInt","trimStart","toString","masker","pattern","options","currencyMasker","prefix","decimalSeparator","groupSeparator","precision","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","suffix","precisionDivider","repeat","formatter","bigNumber","BigNumber","config","FORMAT","toFormat","multimasker","patterns","reduce","memo","length","mask","String"],"mappings":";;;;;;;;AACA;;AACA;;;;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAuE;AAAA,MAAxCC,IAAwC,uEAAV,QAAU;;AACrE,MAAIA,IAAI,KAAK,UAAb,EAAyB;AACvB,QAAI,CAACD,KAAL,EAAY,OAAO,GAAP;AAEZ,UAAME,aAAa,GAAGF,KAAK,CAACG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAtB;AACA,UAAMC,MAAM,GAAGC,QAAQ,CAACH,aAAa,CAACI,SAAd,EAAD,CAAvB;AAEA,WAAOF,MAAM,CAACG,QAAP,EAAP;AACD;;AAED,SAAOP,KAAK,CAACG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,MAAT,CAAgBR,KAAhB,EAA+BS,OAA/B,EAAgDC,OAAhD,EAA8D;AAC5D,SAAO,wBAAUV,KAAV,EAAiB;AAAES,IAAAA,OAAF;AAAW,OAAGC;AAAd,GAAjB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,GAAmD;AAAA,MAA3BX,KAA2B,uEAAnB,GAAmB;AAAA,MAAdU,OAAc;AACjD,QAAM;AACJE,IAAAA,MADI;AAEJC,IAAAA,gBAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,kBANI;AAOJC,IAAAA,sBAPI;AAQJC,IAAAA,iBARI;AASJC,IAAAA;AATI,MAUFV,OAVJ;AAYA,QAAMW,gBAAgB,GAAGhB,QAAQ,CAAC,IAAI,IAAIiB,MAAJ,CAAWP,SAAS,IAAI,CAAxB,CAAL,CAAjC;AACA,QAAMX,MAAM,GAAGC,QAAQ,CAACL,KAAD,CAAR,GAAkBqB,gBAAjC;AAEA,QAAME,SAAS,GAAG;AAChBX,IAAAA,MADgB;AAEhBC,IAAAA,gBAFgB;AAGhBC,IAAAA,cAHgB;AAIhBE,IAAAA,SAAS,EAAEA,SAAS,IAAI,CAJR;AAKhBC,IAAAA,kBALgB;AAMhBC,IAAAA,sBANgB;AAOhBC,IAAAA,iBAPgB;AAQhBC,IAAAA;AARgB,GAAlB;AAWA,QAAMI,SAAS,GAAG,IAAIC,oBAAJ,CAAcrB,MAAd,CAAlB;;AAEAqB,uBAAUC,MAAV,CAAiB;AAAEC,IAAAA,MAAM,EAAEJ;AAAV,GAAjB;;AAEA,SAAOC,SAAS,CAACI,QAAV,CAAmBb,SAAnB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,WAAT,CAAqB7B,KAArB,EAAoC8B,QAApC,EAAwDpB,OAAxD,EAAsE;AACpE,SAAOF,MAAM,CACXR,KADW,EAEX8B,QAAQ,CAACC,MAAT,CACE,CAACC,IAAD,EAAevB,OAAf,KACET,KAAK,CAACiC,MAAN,IAAgBlC,MAAM,CAACiC,IAAD,CAAN,CAAaC,MAA7B,GAAsCD,IAAtC,GAA6CvB,OAFjD,EAGEqB,QAAQ,CAAC,CAAD,CAHV,CAFW,EAOXpB,OAPW,CAAb;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwB,IAAT,CACElC,KADF,EAKE;AAAA,MAHAS,OAGA,uEAH6B,EAG7B;AAAA,MAFAR,IAEA,uEAF8B,QAE9B;AAAA,MADAS,OACA;;AACA,MAAIT,IAAI,KAAK,UAAb,EAAyB;AACvB,WAAOU,cAAc,CAACwB,MAAM,CAACnC,KAAD,CAAP,EAAgBU,OAAhB,CAArB;AACD;;AAED,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAOD,MAAM,CAAC2B,MAAM,CAACnC,KAAD,CAAP,EAAgBS,OAAO,IAAI,EAA3B,EAA+B,EAA/B,CAAb;AACD;;AAED,SAAOoB,WAAW,CAACM,MAAM,CAACnC,KAAD,CAAP,EAAgBS,OAAhB,EAAyB,EAAzB,CAAlB;AACD","sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"]}
\ No newline at end of file
+{"version":3,"names":["unMask","value","type","unMaskedValue","replace","number","parseInt","trimStart","toString","masker","pattern","options","toPattern","currencyMasker","prefix","decimalSeparator","groupSeparator","precision","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","suffix","precisionDivider","repeat","formatter","bigNumber","BigNumber","config","FORMAT","toFormat","multimasker","patterns","reduce","memo","length","mask","String"],"sources":["mask.ts"],"sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"],"mappings":";;;;;;;;AACA;;AACA;;;;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAuE;EAAA,IAAxCC,IAAwC,uEAAV,QAAU;;EACrE,IAAIA,IAAI,KAAK,UAAb,EAAyB;IACvB,IAAI,CAACD,KAAL,EAAY,OAAO,GAAP;IAEZ,MAAME,aAAa,GAAGF,KAAK,CAACG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAtB;IACA,MAAMC,MAAM,GAAGC,QAAQ,CAACH,aAAa,CAACI,SAAd,EAAD,CAAvB;IAEA,OAAOF,MAAM,CAACG,QAAP,EAAP;EACD;;EAED,OAAOP,KAAK,CAACG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,MAAT,CAAgBR,KAAhB,EAA+BS,OAA/B,EAAgDC,OAAhD,EAA8D;EAC5D,OAAO,IAAAC,kBAAA,EAAUX,KAAV,EAAiB;IAAES,OAAF;IAAW,GAAGC;EAAd,CAAjB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,GAAmD;EAAA,IAA3BZ,KAA2B,uEAAnB,GAAmB;EAAA,IAAdU,OAAc;EACjD,MAAM;IACJG,MADI;IAEJC,gBAFI;IAGJC,cAHI;IAIJC,SAJI;IAKJC,SALI;IAMJC,kBANI;IAOJC,sBAPI;IAQJC,iBARI;IASJC;EATI,IAUFX,OAVJ;EAYA,MAAMY,gBAAgB,GAAGjB,QAAQ,CAAC,IAAI,IAAIkB,MAAJ,CAAWP,SAAS,IAAI,CAAxB,CAAL,CAAjC;EACA,MAAMZ,MAAM,GAAGC,QAAQ,CAACL,KAAD,CAAR,GAAkBsB,gBAAjC;EAEA,MAAME,SAAS,GAAG;IAChBX,MADgB;IAEhBC,gBAFgB;IAGhBC,cAHgB;IAIhBE,SAAS,EAAEA,SAAS,IAAI,CAJR;IAKhBC,kBALgB;IAMhBC,sBANgB;IAOhBC,iBAPgB;IAQhBC;EARgB,CAAlB;EAWA,MAAMI,SAAS,GAAG,IAAIC,oBAAJ,CAActB,MAAd,CAAlB;;EAEAsB,oBAAA,CAAUC,MAAV,CAAiB;IAAEC,MAAM,EAAEJ;EAAV,CAAjB;;EAEA,OAAOC,SAAS,CAACI,QAAV,CAAmBb,SAAnB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,WAAT,CAAqB9B,KAArB,EAAoC+B,QAApC,EAAwDrB,OAAxD,EAAsE;EACpE,OAAOF,MAAM,CACXR,KADW,EAEX+B,QAAQ,CAACC,MAAT,CACE,CAACC,IAAD,EAAexB,OAAf,KACET,KAAK,CAACkC,MAAN,IAAgBnC,MAAM,CAACkC,IAAD,CAAN,CAAaC,MAA7B,GAAsCD,IAAtC,GAA6CxB,OAFjD,EAGEsB,QAAQ,CAAC,CAAD,CAHV,CAFW,EAOXrB,OAPW,CAAb;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyB,IAAT,CACEnC,KADF,EAKE;EAAA,IAHAS,OAGA,uEAH6B,EAG7B;EAAA,IAFAR,IAEA,uEAF8B,QAE9B;EAAA,IADAS,OACA;;EACA,IAAIT,IAAI,KAAK,UAAb,EAAyB;IACvB,OAAOW,cAAc,CAACwB,MAAM,CAACpC,KAAD,CAAP,EAAgBU,OAAhB,CAArB;EACD;;EAED,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,OAAOD,MAAM,CAAC4B,MAAM,CAACpC,KAAD,CAAP,EAAgBS,OAAO,IAAI,EAA3B,EAA+B,EAA/B,CAAb;EACD;;EAED,OAAOqB,WAAW,CAACM,MAAM,CAACpC,KAAD,CAAP,EAAgBS,OAAhB,EAAyB,EAAzB,CAAlB;AACD"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/utils/mask.test.js.map b/node_modules/react-native-mask-text/lib/commonjs/utils/mask.test.js.map
index 9205d3d..8126eac 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/utils/mask.test.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/utils/mask.test.js.map
@@ -1 +1 @@
-{"version":3,"sources":["mask.test.ts"],"names":["test","expected","received","expect","toBe","prefix","decimalSeparator","groupSeparator","precision"],"mappings":";;AAAA;;AAEAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,QAAMC,QAAQ,GAAG,gBAAjB;AACA,QAAMC,QAAQ,GAAG,gBAAK,aAAL,EAAoB,gBAApB,CAAjB;AAEAC,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;AAC3C,QAAMC,QAAQ,GAAG,cAAjB;AACA,QAAMC,QAAQ,GAAG,gBAAK,cAAL,EAAqB,cAArB,CAAjB;AAEAC,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,QAAMC,QAAQ,GAAG,SAAjB;AACA,QAAMC,QAAQ,GAAG,gBAAK,SAAL,EAAgB,SAAhB,CAAjB;AAEAC,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;AAC3C,QAAMC,QAAQ,GAAG,QAAjB;AACA,QAAMC,QAAQ,GAAG,gBAAK,MAAL,EAAa,EAAb,EAAiB,UAAjB,EAA6B;AAC5CG,IAAAA,MAAM,EAAE,GADoC;AAE5CC,IAAAA,gBAAgB,EAAE,GAF0B;AAG5CC,IAAAA,cAAc,EAAE,GAH4B;AAI5CC,IAAAA,SAAS,EAAE;AAJiC,GAA7B,CAAjB;AAOAL,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CAVG,CAAJ;AAYAD,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/B,QAAMC,QAAQ,GAAG,aAAjB;AACA,QAAMC,QAAQ,GAAG,kBAAO,gBAAP,CAAjB;AAEAC,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,wBAAD,EAA2B,MAAM;AACnC,QAAMC,QAAQ,GAAG,MAAjB;AACA,QAAMC,QAAQ,GAAG,kBAAO,QAAP,EAAiB,UAAjB,CAAjB;AAEAC,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ","sourcesContent":["import { mask, unMask } from './mask'\n\ntest('should mask with number digit pattern', () => {\n  const expected = '342.934.480-80'\n  const received = mask('34293448080', '999.999.999-99')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alpha pattern', () => {\n  const expected = 'react-native'\n  const received = mask('react native', 'AAAAA-AAAAAA')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alphanumeric pattern', () => {\n  const expected = 'rct-777'\n  const received = mask('rct 777', 'AAA-999')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with currency mask', () => {\n  const expected = '$59.99'\n  const received = mask('5999', '', 'currency', {\n    prefix: '$',\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    precision: 2,\n  })\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask text', () => {\n  const expected = '34293448080'\n  const received = unMask('342.934.480-80')\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask currency', () => {\n  const expected = '5999'\n  const received = unMask('$59.99', 'currency')\n\n  expect(received).toBe(expected)\n})\n"]}
\ No newline at end of file
+{"version":3,"names":["test","expected","received","mask","expect","toBe","prefix","decimalSeparator","groupSeparator","precision","unMask"],"sources":["mask.test.ts"],"sourcesContent":["import { mask, unMask } from './mask'\n\ntest('should mask with number digit pattern', () => {\n  const expected = '342.934.480-80'\n  const received = mask('34293448080', '999.999.999-99')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alpha pattern', () => {\n  const expected = 'react-native'\n  const received = mask('react native', 'AAAAA-AAAAAA')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alphanumeric pattern', () => {\n  const expected = 'rct-777'\n  const received = mask('rct 777', 'AAA-999')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with currency mask', () => {\n  const expected = '$59.99'\n  const received = mask('5999', '', 'currency', {\n    prefix: '$',\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    precision: 2,\n  })\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask text', () => {\n  const expected = '34293448080'\n  const received = unMask('342.934.480-80')\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask currency', () => {\n  const expected = '5999'\n  const received = unMask('$59.99', 'currency')\n\n  expect(received).toBe(expected)\n})\n"],"mappings":";;AAAA;;AAEAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;EAClD,MAAMC,QAAQ,GAAG,gBAAjB;EACA,MAAMC,QAAQ,GAAG,IAAAC,UAAA,EAAK,aAAL,EAAoB,gBAApB,CAAjB;EAEAC,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsBJ,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;EAC3C,MAAMC,QAAQ,GAAG,cAAjB;EACA,MAAMC,QAAQ,GAAG,IAAAC,UAAA,EAAK,cAAL,EAAqB,cAArB,CAAjB;EAEAC,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsBJ,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,uCAAD,EAA0C,MAAM;EAClD,MAAMC,QAAQ,GAAG,SAAjB;EACA,MAAMC,QAAQ,GAAG,IAAAC,UAAA,EAAK,SAAL,EAAgB,SAAhB,CAAjB;EAEAC,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsBJ,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;EAC3C,MAAMC,QAAQ,GAAG,QAAjB;EACA,MAAMC,QAAQ,GAAG,IAAAC,UAAA,EAAK,MAAL,EAAa,EAAb,EAAiB,UAAjB,EAA6B;IAC5CG,MAAM,EAAE,GADoC;IAE5CC,gBAAgB,EAAE,GAF0B;IAG5CC,cAAc,EAAE,GAH4B;IAI5CC,SAAS,EAAE;EAJiC,CAA7B,CAAjB;EAOAL,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsBJ,QAAtB;AACD,CAVG,CAAJ;AAYAD,IAAI,CAAC,oBAAD,EAAuB,MAAM;EAC/B,MAAMC,QAAQ,GAAG,aAAjB;EACA,MAAMC,QAAQ,GAAG,IAAAQ,YAAA,EAAO,gBAAP,CAAjB;EAEAN,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsBJ,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,wBAAD,EAA2B,MAAM;EACnC,MAAMC,QAAQ,GAAG,MAAjB;EACA,MAAMC,QAAQ,GAAG,IAAAQ,YAAA,EAAO,QAAP,EAAiB,UAAjB,CAAjB;EAEAN,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsBJ,QAAtB;AACD,CALG,CAAJ"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/commonjs/utils/toPattern.js.map b/node_modules/react-native-mask-text/lib/commonjs/utils/toPattern.js.map
index c163129..05c0521 100644
--- a/node_modules/react-native-mask-text/lib/commonjs/utils/toPattern.js.map
+++ b/node_modules/react-native-mask-text/lib/commonjs/utils/toPattern.js.map
@@ -1 +1 @@
-{"version":3,"sources":["toPattern.ts"],"names":["toPattern","value","optionPattern","pattern","patternChars","replace","output","split","values","toString","charsValues","placeholder","undefined","charCounter","index","outputLength","length","join","DIGIT","match","ALPHA","ALPHANUM","slice","substr"],"mappings":";;;;;;;AAAA;;AACA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CACEC,KADF,EAEEC,aAFF,EAGU;AACR,QAAMC,OAAO,GACX,OAAOD,aAAP,KAAyB,QAAzB,GAAoCA,aAAa,CAACC,OAAlD,GAA4DD,aAD9D;AAEA,QAAME,YAAY,GAAGD,OAAO,CAACE,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAArB;AACA,QAAMC,MAAM,GAAGH,OAAO,CAACI,KAAR,CAAc,EAAd,CAAf;AACA,QAAMC,MAAM,GAAGP,KAAK,CAACQ,QAAN,GAAiBJ,OAAjB,CAAyB,KAAzB,EAAgC,EAAhC,CAAf;AACA,QAAMK,WAAW,GAAGF,MAAM,CAACH,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAApB;AACA,QAAMM,WAAW,GACf,OAAOT,aAAP,KAAyB,QAAzB,GAAoCA,aAAa,CAACS,WAAlD,GAAgEC,SADlE;AAEA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,KAAJ;AAEA,QAAMC,YAAY,GAAGT,MAAM,CAACU,MAA5B;;AACA,OAAKF,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGC,YAAxB,EAAsCD,KAAK,EAA3C,EAA+C;AAC7C;AACA,QAAID,WAAW,IAAIL,MAAM,CAACQ,MAA1B,EAAkC;AAChC,UAAIZ,YAAY,CAACY,MAAb,KAAwBN,WAAW,CAACM,MAAxC,EAAgD;AAC9C,eAAOV,MAAM,CAACW,IAAP,CAAY,EAAZ,CAAP;AACD;;AACD,UACEN,WAAW,KAAKC,SAAhB,IACAR,YAAY,CAACY,MAAb,GAAsBN,WAAW,CAACM,MAFpC,EAGE;AACA,eAAO,6BAAeV,MAAf,EAAuBQ,KAAvB,EAA8BH,WAA9B,EAA2CM,IAA3C,CAAgD,EAAhD,CAAP;AACD;;AACD;AACD,KAXD,MAWO,IACJX,MAAM,CAACQ,KAAD,CAAN,KAAkBI,gBAAlB,IAA2BV,MAAM,CAACK,WAAD,CAAN,CAAoBM,KAApB,CAA0B,OAA1B,CAA5B,IACCb,MAAM,CAACQ,KAAD,CAAN,KAAkBM,gBAAlB,IAA2BZ,MAAM,CAACK,WAAD,CAAN,CAAoBM,KAApB,CAA0B,UAA1B,CAD5B,IAECb,MAAM,CAACQ,KAAD,CAAN,KAAkBO,mBAAlB,IAA8Bb,MAAM,CAACK,WAAD,CAAN,CAAoBM,KAApB,CAA0B,aAA1B,CAH1B,EAIL;AACAb,MAAAA,MAAM,CAACQ,KAAD,CAAN,GAAgBN,MAAM,CAACK,WAAW,EAAZ,CAAtB;AACD,KANM,MAMA,IACLP,MAAM,CAACQ,KAAD,CAAN,KAAkBI,gBAAlB,IACAZ,MAAM,CAACQ,KAAD,CAAN,KAAkBM,gBADlB,IAEAd,MAAM,CAACQ,KAAD,CAAN,KAAkBO,mBAHb,EAIL;AACA,UAAIV,WAAW,KAAKC,SAApB,EAA+B;AAC7B,eAAO,6BAAeN,MAAf,EAAuBQ,KAAvB,EAA8BH,WAA9B,EAA2CM,IAA3C,CAAgD,EAAhD,CAAP;AACD;;AACD,aAAOX,MAAM,CAACgB,KAAP,CAAa,CAAb,EAAgBR,KAAhB,EAAuBG,IAAvB,CAA4B,EAA5B,CAAP,CAJA,CAMA;AACD,KAXM,MAWA,IAAIX,MAAM,CAACQ,KAAD,CAAN,KAAkBN,MAAM,CAACK,WAAD,CAA5B,EAA2C;AAChDA,MAAAA,WAAW;AACZ;AACF;;AACD,SAAOP,MAAM,CAACW,IAAP,CAAY,EAAZ,EAAgBM,MAAhB,CAAuB,CAAvB,EAA0BT,KAA1B,CAAP;AACD;;eAEcd,S","sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\nimport addPlaceholder from './addPlaceholder'\n\ntype OptionPattern = {\n  pattern: string\n  placeholder: string\n}\n\n/**\n * function toPattern\n * @param {number | string} value\n * @param {string | OptionPattern} optionPattern\n * @returns {string}\n */\nfunction toPattern(\n  value: number | string,\n  optionPattern: string | OptionPattern\n): string {\n  const pattern =\n    typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern\n  const patternChars = pattern.replace(/\\W/g, '')\n  const output = pattern.split('')\n  const values = value.toString().replace(/\\W/g, '')\n  const charsValues = values.replace(/\\W/g, '')\n  const placeholder =\n    typeof optionPattern === 'object' ? optionPattern.placeholder : undefined\n  let charCounter = 0\n  let index\n\n  const outputLength = output.length\n  for (index = 0; index < outputLength; index++) {\n    // Reached the end of input\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('')\n      }\n      if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      break\n    } else if (\n      (output[index] === DIGIT && values[charCounter].match(/[0-9]/)) ||\n      (output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/)) ||\n      (output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/))\n    ) {\n      output[index] = values[charCounter++]\n    } else if (\n      output[index] === DIGIT ||\n      output[index] === ALPHA ||\n      output[index] === ALPHANUM\n    ) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      return output.slice(0, index).join('')\n\n      // exact match for a non-magic character\n    } else if (output[index] === values[charCounter]) {\n      charCounter++\n    }\n  }\n  return output.join('').substr(0, index)\n}\n\nexport default toPattern\n"]}
\ No newline at end of file
+{"version":3,"names":["toPattern","value","optionPattern","pattern","patternChars","replace","output","split","values","toString","charsValues","placeholder","undefined","charCounter","index","outputLength","length","join","addPlaceholder","DIGIT","match","ALPHA","ALPHANUM","slice","substr"],"sources":["toPattern.ts"],"sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\nimport addPlaceholder from './addPlaceholder'\n\ntype OptionPattern = {\n  pattern: string\n  placeholder: string\n}\n\n/**\n * function toPattern\n * @param {number | string} value\n * @param {string | OptionPattern} optionPattern\n * @returns {string}\n */\nfunction toPattern(\n  value: number | string,\n  optionPattern: string | OptionPattern\n): string {\n  const pattern =\n    typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern\n  const patternChars = pattern.replace(/\\W/g, '')\n  const output = pattern.split('')\n  const values = value.toString().replace(/\\W/g, '')\n  const charsValues = values.replace(/\\W/g, '')\n  const placeholder =\n    typeof optionPattern === 'object' ? optionPattern.placeholder : undefined\n  let charCounter = 0\n  let index\n\n  const outputLength = output.length\n  for (index = 0; index < outputLength; index++) {\n    // Reached the end of input\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('')\n      }\n      if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      break\n    } else if (\n      (output[index] === DIGIT && values[charCounter].match(/[0-9]/)) ||\n      (output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/)) ||\n      (output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/))\n    ) {\n      output[index] = values[charCounter++]\n    } else if (\n      output[index] === DIGIT ||\n      output[index] === ALPHA ||\n      output[index] === ALPHANUM\n    ) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      return output.slice(0, index).join('')\n\n      // exact match for a non-magic character\n    } else if (output[index] === values[charCounter]) {\n      charCounter++\n    }\n  }\n  return output.join('').substr(0, index)\n}\n\nexport default toPattern\n"],"mappings":";;;;;;;AAAA;;AACA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CACEC,KADF,EAEEC,aAFF,EAGU;EACR,MAAMC,OAAO,GACX,OAAOD,aAAP,KAAyB,QAAzB,GAAoCA,aAAa,CAACC,OAAlD,GAA4DD,aAD9D;EAEA,MAAME,YAAY,GAAGD,OAAO,CAACE,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAArB;EACA,MAAMC,MAAM,GAAGH,OAAO,CAACI,KAAR,CAAc,EAAd,CAAf;EACA,MAAMC,MAAM,GAAGP,KAAK,CAACQ,QAAN,GAAiBJ,OAAjB,CAAyB,KAAzB,EAAgC,EAAhC,CAAf;EACA,MAAMK,WAAW,GAAGF,MAAM,CAACH,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAApB;EACA,MAAMM,WAAW,GACf,OAAOT,aAAP,KAAyB,QAAzB,GAAoCA,aAAa,CAACS,WAAlD,GAAgEC,SADlE;EAEA,IAAIC,WAAW,GAAG,CAAlB;EACA,IAAIC,KAAJ;EAEA,MAAMC,YAAY,GAAGT,MAAM,CAACU,MAA5B;;EACA,KAAKF,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGC,YAAxB,EAAsCD,KAAK,EAA3C,EAA+C;IAC7C;IACA,IAAID,WAAW,IAAIL,MAAM,CAACQ,MAA1B,EAAkC;MAChC,IAAIZ,YAAY,CAACY,MAAb,KAAwBN,WAAW,CAACM,MAAxC,EAAgD;QAC9C,OAAOV,MAAM,CAACW,IAAP,CAAY,EAAZ,CAAP;MACD;;MACD,IACEN,WAAW,KAAKC,SAAhB,IACAR,YAAY,CAACY,MAAb,GAAsBN,WAAW,CAACM,MAFpC,EAGE;QACA,OAAO,IAAAE,uBAAA,EAAeZ,MAAf,EAAuBQ,KAAvB,EAA8BH,WAA9B,EAA2CM,IAA3C,CAAgD,EAAhD,CAAP;MACD;;MACD;IACD,CAXD,MAWO,IACJX,MAAM,CAACQ,KAAD,CAAN,KAAkBK,gBAAlB,IAA2BX,MAAM,CAACK,WAAD,CAAN,CAAoBO,KAApB,CAA0B,OAA1B,CAA5B,IACCd,MAAM,CAACQ,KAAD,CAAN,KAAkBO,gBAAlB,IAA2Bb,MAAM,CAACK,WAAD,CAAN,CAAoBO,KAApB,CAA0B,UAA1B,CAD5B,IAECd,MAAM,CAACQ,KAAD,CAAN,KAAkBQ,mBAAlB,IAA8Bd,MAAM,CAACK,WAAD,CAAN,CAAoBO,KAApB,CAA0B,aAA1B,CAH1B,EAIL;MACAd,MAAM,CAACQ,KAAD,CAAN,GAAgBN,MAAM,CAACK,WAAW,EAAZ,CAAtB;IACD,CANM,MAMA,IACLP,MAAM,CAACQ,KAAD,CAAN,KAAkBK,gBAAlB,IACAb,MAAM,CAACQ,KAAD,CAAN,KAAkBO,gBADlB,IAEAf,MAAM,CAACQ,KAAD,CAAN,KAAkBQ,mBAHb,EAIL;MACA,IAAIX,WAAW,KAAKC,SAApB,EAA+B;QAC7B,OAAO,IAAAM,uBAAA,EAAeZ,MAAf,EAAuBQ,KAAvB,EAA8BH,WAA9B,EAA2CM,IAA3C,CAAgD,EAAhD,CAAP;MACD;;MACD,OAAOX,MAAM,CAACiB,KAAP,CAAa,CAAb,EAAgBT,KAAhB,EAAuBG,IAAvB,CAA4B,EAA5B,CAAP,CAJA,CAMA;IACD,CAXM,MAWA,IAAIX,MAAM,CAACQ,KAAD,CAAN,KAAkBN,MAAM,CAACK,WAAD,CAA5B,EAA2C;MAChDA,WAAW;IACZ;EACF;;EACD,OAAOP,MAAM,CAACW,IAAP,CAAY,EAAZ,EAAgBO,MAAhB,CAAuB,CAAvB,EAA0BV,KAA1B,CAAP;AACD;;eAEcd,S"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/@types/MaskOptions.js.map b/node_modules/react-native-mask-text/lib/module/@types/MaskOptions.js.map
index 9ffd4b2..5d6f0e2 100644
--- a/node_modules/react-native-mask-text/lib/module/@types/MaskOptions.js.map
+++ b/node_modules/react-native-mask-text/lib/module/@types/MaskOptions.js.map
@@ -1 +1 @@
-{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":[]}
\ No newline at end of file
+{"version":3,"names":[],"sources":["MaskOptions.ts"],"sourcesContent":["export interface MaskOptions {\n  prefix?: string\n  decimalSeparator?: string\n  groupSeparator?: string\n  precision?: number\n  groupSize?: number\n  secondaryGroupSize?: number\n  fractionGroupSeparator?: string\n  fractionGroupSize?: number\n  suffix?: string\n}\n"],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/components/MaskedText.js.map b/node_modules/react-native-mask-text/lib/module/components/MaskedText.js.map
index c8ac3b3..e98cb1b 100644
--- a/node_modules/react-native-mask-text/lib/module/components/MaskedText.js.map
+++ b/node_modules/react-native-mask-text/lib/module/components/MaskedText.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedText.tsx"],"names":["React","Text","mask","MaskedText","children","text","pattern","type","options","rest"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAgC,cAAhC;AACA,SAASC,IAAT,QAAqB,eAArB;AAUA,OAAO,SAASC,UAAT,OAMsC;AAAA,MANlB;AACzBC,IAAAA,QAAQ,EAAEC,IADe;AAEzBH,IAAAA,IAAI,EAAEI,OAAO,GAAG,EAFS;AAGzBC,IAAAA,IAAI,GAAG,QAHkB;AAIzBC,IAAAA,OAAO,GAAG,EAJe;AAKzB,OAAGC;AALsB,GAMkB;AAC3C,sBAAO,oBAAC,IAAD,EAAUA,IAAV,EAAiBP,IAAI,CAACG,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,CAArB,CAAP;AACD","sourcesContent":["import React from 'react'\nimport { Text, TextProps } from 'react-native'\nimport { mask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\nexport interface MaskedTextProps {\n  children: string\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n}\n\nexport function MaskedText({\n  children: text,\n  mask: pattern = '',\n  type = 'custom',\n  options = {} as MaskOptions,\n  ...rest\n}: MaskedTextProps & TextProps): JSX.Element {\n  return <Text {...rest}>{mask(text, pattern, type, options)}</Text>;\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["React","Text","mask","MaskedText","children","text","pattern","type","options","rest"],"sources":["MaskedText.tsx"],"sourcesContent":["import React from 'react'\nimport { Text, TextProps } from 'react-native'\nimport { mask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\nexport interface MaskedTextProps {\n  children: string\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n}\n\nexport function MaskedText({\n  children: text,\n  mask: pattern = '',\n  type = 'custom',\n  options = {} as MaskOptions,\n  ...rest\n}: MaskedTextProps & TextProps): JSX.Element {\n  return <Text {...rest}>{mask(text, pattern, type, options)}</Text>;\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAgC,cAAhC;AACA,SAASC,IAAT,QAAqB,eAArB;AAUA,OAAO,SAASC,UAAT,OAMsC;EAAA,IANlB;IACzBC,QAAQ,EAAEC,IADe;IAEzBH,IAAI,EAAEI,OAAO,GAAG,EAFS;IAGzBC,IAAI,GAAG,QAHkB;IAIzBC,OAAO,GAAG,EAJe;IAKzB,GAAGC;EALsB,CAMkB;EAC3C,oBAAO,oBAAC,IAAD,EAAUA,IAAV,EAAiBP,IAAI,CAACG,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,CAArB,CAAP;AACD"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/components/MaskedText.test.js.map b/node_modules/react-native-mask-text/lib/module/components/MaskedText.test.js.map
index 1d1fd65..ccb582d 100644
--- a/node_modules/react-native-mask-text/lib/module/components/MaskedText.test.js.map
+++ b/node_modules/react-native-mask-text/lib/module/components/MaskedText.test.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedText.test.tsx"],"names":["React","render","MaskedText","describe","test","container","expect","getByText","toBeTruthy","toMatchSnapshot","prefix","decimalSeparator","groupSeparator","precision"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,IAAI,CAAC,2CAAD,EAA8C,MAAM;AACtD,UAAMC,SAAS,GAAGJ,MAAM,eAAC,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC;AAAjB,gBAAD,CAAxB;AAEAK,IAAAA,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,SAApB,CAAD,CAAN,CAAuCC,UAAvC;AAEAF,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;AACD,GANG,CAAJ;AAQAL,EAAAA,IAAI,CAAC,6CAAD,EAAgD,MAAM;AACxD,UAAMC,SAAS,GAAGJ,MAAM,eACtB,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAE;AACPS,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ;AAFX,cADsB,CAAxB;AAcAP,IAAAA,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,QAApB,CAAD,CAAN,CAAsCC,UAAtC;AAEAF,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;AACD,GAlBG,CAAJ;AAmBD,CA5BO,CAAR","sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react-native';\nimport { MaskedText } from './MaskedText';\n\ndescribe('<MaskedText />', () => {\n  test('should renders correctly with custom mask', () => {\n    const container = render(<MaskedText mask=\"AAA-999\">RCT777</MaskedText>);\n\n    expect(container.getByText('RCT-777')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedText\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n      >\n        5999\n      </MaskedText>\n    );\n\n    expect(container.getByText('$59.99')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n});\n"]}
\ No newline at end of file
+{"version":3,"names":["React","render","MaskedText","describe","test","container","expect","getByText","toBeTruthy","toMatchSnapshot","prefix","decimalSeparator","groupSeparator","precision"],"sources":["MaskedText.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react-native';\nimport { MaskedText } from './MaskedText';\n\ndescribe('<MaskedText />', () => {\n  test('should renders correctly with custom mask', () => {\n    const container = render(<MaskedText mask=\"AAA-999\">RCT777</MaskedText>);\n\n    expect(container.getByText('RCT-777')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedText\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n      >\n        5999\n      </MaskedText>\n    );\n\n    expect(container.getByText('$59.99')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BC,IAAI,CAAC,2CAAD,EAA8C,MAAM;IACtD,MAAMC,SAAS,GAAGJ,MAAM,eAAC,oBAAC,UAAD;MAAY,IAAI,EAAC;IAAjB,YAAD,CAAxB;IAEAK,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,SAApB,CAAD,CAAN,CAAuCC,UAAvC;IAEAF,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;EACD,CANG,CAAJ;EAQAL,IAAI,CAAC,6CAAD,EAAgD,MAAM;IACxD,MAAMC,SAAS,GAAGJ,MAAM,eACtB,oBAAC,UAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPS,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ;IAFX,UADsB,CAAxB;IAcAP,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,QAApB,CAAD,CAAN,CAAsCC,UAAtC;IAEAF,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;EACD,CAlBG,CAAJ;AAmBD,CA5BO,CAAR"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js
index 6e6e472..b05e833 100644
--- a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js
+++ b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js
@@ -10,13 +10,18 @@ export const MaskedTextInputComponent = (_ref, ref) => {
     options = {},
     defaultValue,
     onChangeText,
-    inputAccessoryView,
+    value,
     ...rest
   } = _ref;
+
+  const getMaskedValue = value => mask(value, pattern, type, options);
+
+  const getUnMaskedValue = value => unMask(value, type);
+
   const defaultValueCustom = defaultValue || '';
   const defaultValueCurrency = defaultValue || '0';
-  const initialMaskedValue = type === 'currency' ? mask(defaultValueCurrency, pattern, type, options) : mask(defaultValueCustom, pattern, type, options);
-  const initialUnMaskedValue = type === 'currency' ? unMask(defaultValueCurrency, type) : unMask(defaultValueCustom, type);
+  const initialMaskedValue = getMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);
+  const initialUnMaskedValue = getUnMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);
   const [maskedValue, setMaskedValue] = useState(initialMaskedValue);
   const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);
 
@@ -30,12 +35,20 @@ export const MaskedTextInputComponent = (_ref, ref) => {
   useEffect(() => {
     onChangeText(maskedValue, unMaskedValue);
   }, [maskedValue, unMaskedValue]);
-  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, _extends({
+  useEffect(() => {
+    if (value) {
+      setMaskedValue(getMaskedValue(value));
+      setUnmaskedValue(getUnMaskedValue(value));
+    } else {
+      setMaskedValue(initialMaskedValue);
+      setUnmaskedValue(initialUnMaskedValue);
+    }
+  }, [value]);
+  return /*#__PURE__*/React.createElement(TextInput, _extends({
     onChangeText: value => onChange(value),
+    value: maskedValue,
     ref: ref
-  }, rest, {
-    value: maskedValue
-  })), inputAccessoryView);
+  }, rest));
 };
 export const MaskedTextInput = /*#__PURE__*/forwardRef(MaskedTextInputComponent);
 //# sourceMappingURL=MaskedTextInput.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js.map b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js.map
index ef3ef56..fd9347b 100644
--- a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js.map
+++ b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedTextInput.tsx"],"names":["React","useEffect","useState","forwardRef","TextInput","mask","unMask","MaskedTextInputComponent","ref","pattern","type","options","defaultValue","onChangeText","inputAccessoryView","rest","defaultValueCustom","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","maskedValue","setMaskedValue","unMaskedValue","setUnmaskedValue","onChange","value","newUnMaskedValue","newMaskedValue","MaskedTextInput"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,SADF,EAEEC,QAFF,EAGEC,UAHF,QAKO,OALP;AAMA,SAASC,SAAT,QAA0C,cAA1C;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,eAA7B;AAcA,OAAO,MAAMC,wBAGZ,GAAG,OAUFC,GAVE,KAWc;AAAA,MAVhB;AACEH,IAAAA,IAAI,EAAEI,OAAO,GAAG,EADlB;AAEEC,IAAAA,IAAI,GAAG,QAFT;AAGEC,IAAAA,OAAO,GAAG,EAHZ;AAIEC,IAAAA,YAJF;AAKEC,IAAAA,YALF;AAMEC,IAAAA,kBANF;AAOE,OAAGC;AAPL,GAUgB;AAChB,QAAMC,kBAAkB,GAAGJ,YAAY,IAAI,EAA3C;AACA,QAAMK,oBAAoB,GAAGL,YAAY,IAAI,GAA7C;AAEA,QAAMM,kBAAkB,GAAMR,IAAI,KAAK,UAAT,GACxBL,IAAI,CAACY,oBAAD,EAAuBR,OAAvB,EAAgCC,IAAhC,EAAsCC,OAAtC,CADoB,GAExBN,IAAI,CAACW,kBAAD,EAAqBP,OAArB,EAA8BC,IAA9B,EAAoCC,OAApC,CAFV;AAIA,QAAMQ,oBAAoB,GAAMT,IAAI,KAAK,UAAT,GAC1BJ,MAAM,CAACW,oBAAD,EAAuBP,IAAvB,CADoB,GAE1BJ,MAAM,CAACU,kBAAD,EAAqBN,IAArB,CAFZ;AAIA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAACgB,kBAAD,CAA9C;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAACiB,oBAAD,CAAlD;;AAEA,WAASK,QAAT,CAAkBC,KAAlB,EAAiC;AAC/B,UAAMC,gBAAgB,GAAGpB,MAAM,CAACmB,KAAD,EAAQf,IAAR,CAA/B;AACA,UAAMiB,cAAc,GAAGtB,IAAI,CAACqB,gBAAD,EAAmBjB,OAAnB,EAA4BC,IAA5B,EAAkCC,OAAlC,CAA3B;AAEAU,IAAAA,cAAc,CAACM,cAAD,CAAd;AACAJ,IAAAA,gBAAgB,CAACG,gBAAD,CAAhB;AACD;;AAEDzB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,YAAY,CAACO,WAAD,EAAcE,aAAd,CAAZ;AACD,GAFQ,EAEN,CAACF,WAAD,EAAcE,aAAd,CAFM,CAAT;AAIA,sBACE,uDACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAGG,KAAD,IAAWD,QAAQ,CAACC,KAAD,CADnC;AAEE,IAAA,GAAG,EAAEjB;AAFP,KAGMO,IAHN;AAIE,IAAA,KAAK,EAAEK;AAJT,KADF,EAOGN,kBAPH,CADF;AAWD,CApDM;AAsDP,OAAO,MAAMc,eAAe,gBAAGzB,UAAU,CAACI,wBAAD,CAAlC","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\n\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n  inputAccessoryView?: JSX.Element;\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    inputAccessoryView,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialMaskedValue =    type === 'currency'\n      ? mask(defaultValueCurrency, pattern, type, options)\n      : mask(defaultValueCustom, pattern, type, options);\n\n  const initialUnMaskedValue =    type === 'currency'\n      ? unMask(defaultValueCurrency, type)\n      : unMask(defaultValueCustom, type);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  return (\n    <>\n      <TextInput\n        onChangeText={(value) => onChange(value)}\n        ref={ref}\n        {...rest}\n        value={maskedValue}\n      />\n      {inputAccessoryView}\n    </>\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"]}
\ No newline at end of file
+{"version":3,"names":["React","useEffect","useState","forwardRef","TextInput","mask","unMask","MaskedTextInputComponent","ref","pattern","type","options","defaultValue","onChangeText","value","rest","getMaskedValue","getUnMaskedValue","defaultValueCustom","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","maskedValue","setMaskedValue","unMaskedValue","setUnmaskedValue","onChange","newUnMaskedValue","newMaskedValue","MaskedTextInput"],"sources":["MaskedTextInput.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\n\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    value,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const getMaskedValue = (value: string) => mask(value, pattern, type, options);\n  const getUnMaskedValue = (value: string) => unMask(value, type);\n\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialMaskedValue = getMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);\n\n  const initialUnMaskedValue = getUnMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  useEffect(() => {\n    if (value) {\n      setMaskedValue(getMaskedValue(value));\n      setUnmaskedValue(getUnMaskedValue(value));\n    } else {\n      setMaskedValue(initialMaskedValue);\n      setUnmaskedValue(initialUnMaskedValue);\n    }\n  }, [value])\n\n  return (\n    <TextInput\n      onChangeText={(value) => onChange(value)}\n      value={maskedValue}\n      ref={ref}\n      {...rest}\n    />\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,SADF,EAEEC,QAFF,EAGEC,UAHF,QAKO,OALP;AAMA,SAASC,SAAT,QAA0C,cAA1C;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,eAA7B;AAaA,OAAO,MAAMC,wBAGZ,GAAG,OAUFC,GAVE,KAWc;EAAA,IAVhB;IACEH,IAAI,EAAEI,OAAO,GAAG,EADlB;IAEEC,IAAI,GAAG,QAFT;IAGEC,OAAO,GAAG,EAHZ;IAIEC,YAJF;IAKEC,YALF;IAMEC,KANF;IAOE,GAAGC;EAPL,CAUgB;;EAChB,MAAMC,cAAc,GAAIF,KAAD,IAAmBT,IAAI,CAACS,KAAD,EAAQL,OAAR,EAAiBC,IAAjB,EAAuBC,OAAvB,CAA9C;;EACA,MAAMM,gBAAgB,GAAIH,KAAD,IAAmBR,MAAM,CAACQ,KAAD,EAAQJ,IAAR,CAAlD;;EAEA,MAAMQ,kBAAkB,GAAGN,YAAY,IAAI,EAA3C;EACA,MAAMO,oBAAoB,GAAGP,YAAY,IAAI,GAA7C;EAEA,MAAMQ,kBAAkB,GAAGJ,cAAc,CAACN,IAAI,KAAK,UAAT,GAAsBS,oBAAtB,GAA6CD,kBAA9C,CAAzC;EAEA,MAAMG,oBAAoB,GAAGJ,gBAAgB,CAACP,IAAI,KAAK,UAAT,GAAsBS,oBAAtB,GAA6CD,kBAA9C,CAA7C;EAEA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAACkB,kBAAD,CAA9C;EACA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,CAACmB,oBAAD,CAAlD;;EAEA,SAASK,QAAT,CAAkBZ,KAAlB,EAAiC;IAC/B,MAAMa,gBAAgB,GAAGrB,MAAM,CAACQ,KAAD,EAAQJ,IAAR,CAA/B;IACA,MAAMkB,cAAc,GAAGvB,IAAI,CAACsB,gBAAD,EAAmBlB,OAAnB,EAA4BC,IAA5B,EAAkCC,OAAlC,CAA3B;IAEAY,cAAc,CAACK,cAAD,CAAd;IACAH,gBAAgB,CAACE,gBAAD,CAAhB;EACD;;EAED1B,SAAS,CAAC,MAAM;IACdY,YAAY,CAACS,WAAD,EAAcE,aAAd,CAAZ;EACD,CAFQ,EAEN,CAACF,WAAD,EAAcE,aAAd,CAFM,CAAT;EAIAvB,SAAS,CAAC,MAAM;IACd,IAAIa,KAAJ,EAAW;MACTS,cAAc,CAACP,cAAc,CAACF,KAAD,CAAf,CAAd;MACAW,gBAAgB,CAACR,gBAAgB,CAACH,KAAD,CAAjB,CAAhB;IACD,CAHD,MAGO;MACLS,cAAc,CAACH,kBAAD,CAAd;MACAK,gBAAgB,CAACJ,oBAAD,CAAhB;IACD;EACF,CARQ,EAQN,CAACP,KAAD,CARM,CAAT;EAUA,oBACE,oBAAC,SAAD;IACE,YAAY,EAAGA,KAAD,IAAWY,QAAQ,CAACZ,KAAD,CADnC;IAEE,KAAK,EAAEQ,WAFT;IAGE,GAAG,EAAEd;EAHP,GAIMO,IAJN,EADF;AAQD,CA1DM;AA4DP,OAAO,MAAMc,eAAe,gBAAG1B,UAAU,CAACI,wBAAD,CAAlC"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js
index fc74e8a..7db88d9 100644
--- a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js
+++ b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js
@@ -1,7 +1,6 @@
 import React from 'react';
 import { render, fireEvent, waitFor } from '@testing-library/react-native';
 import { MaskedTextInput } from './MaskedTextInput';
-import { Button, Keyboard, InputAccessoryView } from 'react-native';
 describe('<MaskedTextInput />', () => {
   const mockedOnChangeText = jest.fn();
   test('should renders correctly with custom mask', () => {
@@ -60,27 +59,5 @@ describe('<MaskedTextInput />', () => {
       expect(container.getByDisplayValue('$59.99')).toBeTruthy();
     });
   });
-  test('should renders correctly with an accessory view', () => {
-    const container = render( /*#__PURE__*/React.createElement(MaskedTextInput, {
-      type: "currency",
-      options: {
-        prefix: '$',
-        decimalSeparator: '.',
-        groupSeparator: ',',
-        precision: 2
-      },
-      onChangeText: mockedOnChangeText,
-      inputAccessoryViewID: "Done",
-      inputAccessoryView: /*#__PURE__*/React.createElement(InputAccessoryView, {
-        nativeID: "Done"
-      }, /*#__PURE__*/React.createElement(Button, {
-        onPress: () => Keyboard.dismiss(),
-        title: "Clear text"
-      }))
-    }));
-    const tree = container.toJSON();
-    expect(tree[0].props.inputAccessoryViewID).toBe('Done');
-    expect(tree[1].props.nativeID).toBe('Done');
-  });
 });
 //# sourceMappingURL=MaskedTextInput.test.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js.map b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js.map
index 4232e27..6ec9afa 100644
--- a/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js.map
+++ b/node_modules/react-native-mask-text/lib/module/components/MaskedTextInput.test.js.map
@@ -1 +1 @@
-{"version":3,"sources":["MaskedTextInput.test.tsx"],"names":["React","render","fireEvent","waitFor","MaskedTextInput","Button","Keyboard","InputAccessoryView","describe","mockedOnChangeText","jest","fn","test","container","expect","toMatchSnapshot","getByDisplayValue","toBeTruthy","prefix","decimalSeparator","groupSeparator","precision","changeText","getByTestId","dismiss","tree","toJSON","props","inputAccessoryViewID","toBe","nativeID"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { MaskedTextInput } from './MaskedTextInput';\nimport { Button, Keyboard, InputAccessoryView } from 'react-native';\n\n\ndescribe('<MaskedTextInput />', () => {\n  const mockedOnChangeText = jest.fn();\n\n  test('should renders correctly with custom mask', () => {\n    const container = render(\n      <MaskedTextInput mask=\"AAA-999\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with custom mask default value', () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        defaultValue=\"ABC-123\"\n      />\n    );\n    expect(container.getByDisplayValue('ABC-123')).toBeTruthy()\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n      />\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should mask input text with custom mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'RCT777')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('RCT-777')).toBeTruthy()\n    })\n  });\n\n  test('should mask input text with currency mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), '5999')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('$59.99')).toBeTruthy()\n    })\n  });\n\n  test('should renders correctly with an accessory view', () => {\n    const container = render(\n      <MaskedTextInput         \n      type=\"currency\"\n      options={{\n        prefix: '$',\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        precision: 2,\n      }} \n      onChangeText={mockedOnChangeText} \n      inputAccessoryViewID='Done'\n      inputAccessoryView={\n        <InputAccessoryView nativeID='Done'>\n        <Button\n          onPress={() => Keyboard.dismiss()}\n          title=\"Clear text\"\n        />\n        </InputAccessoryView>\n      }\n      />,\n    );\n\n    const tree = container.toJSON();\n    expect(tree[0].props.inputAccessoryViewID).toBe('Done');\n    expect(tree[1].props.nativeID).toBe('Done');\n  });\n});\n"]}
\ No newline at end of file
+{"version":3,"names":["React","render","fireEvent","waitFor","MaskedTextInput","describe","mockedOnChangeText","jest","fn","test","container","expect","toMatchSnapshot","getByDisplayValue","toBeTruthy","prefix","decimalSeparator","groupSeparator","precision","changeText","getByTestId"],"sources":["MaskedTextInput.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { MaskedTextInput } from './MaskedTextInput';\n\ndescribe('<MaskedTextInput />', () => {\n  const mockedOnChangeText = jest.fn();\n\n  test('should renders correctly with custom mask', () => {\n    const container = render(\n      <MaskedTextInput mask=\"AAA-999\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with custom mask default value', () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        defaultValue=\"ABC-123\"\n      />\n    );\n    expect(container.getByDisplayValue('ABC-123')).toBeTruthy()\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n      />\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should mask input text with custom mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'RCT777')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('RCT-777')).toBeTruthy()\n    })\n  });\n\n  test('should mask input text with currency mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), '5999')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('$59.99')).toBeTruthy()\n    })\n  });\n});\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,+BAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEAC,QAAQ,CAAC,qBAAD,EAAwB,MAAM;EACpC,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAL,EAA3B;EAEAC,IAAI,CAAC,2CAAD,EAA8C,MAAM;IACtD,MAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;MAAiB,IAAI,EAAC,SAAtB;MAAgC,YAAY,EAAEK;IAA9C,EADsB,CAAxB;IAGAK,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;EACD,CALG,CAAJ;EAOAH,IAAI,CAAC,yDAAD,EAA4D,MAAM;IACpE,MAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEK,kBAFhB;MAGE,YAAY,EAAC;IAHf,EADsB,CAAxB;IAOAK,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;EACD,CATG,CAAJ;EAWAL,IAAI,CAAC,6CAAD,EAAgD,MAAM;IACxD,MAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPc,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFX;MAQE,YAAY,EAAEZ;IARhB,EADsB,CAAxB;IAYAK,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;EACD,CAdG,CAAJ;EAgBAH,IAAI,CAAC,yCAAD,EAA4C,YAAY;IAC1D,MAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEK,kBAFhB;MAGE,MAAM,EAAC;IAHT,EADsB,CAAxB;IAQAJ,SAAS,CAACiB,UAAV,CAAqBT,SAAS,CAACU,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,QAAjE;IAEA,MAAMjB,OAAO,CAAC,MAAM;MAClBQ,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;IACD,CAFY,CAAb;EAGD,CAdG,CAAJ;EAgBAL,IAAI,CAAC,2CAAD,EAA8C,YAAY;IAC5D,MAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPc,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFX;MAQE,YAAY,EAAEZ,kBARhB;MASE,MAAM,EAAC;IATT,EADsB,CAAxB;IAcAJ,SAAS,CAACiB,UAAV,CAAqBT,SAAS,CAACU,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,MAAjE;IAEA,MAAMjB,OAAO,CAAC,MAAM;MAClBQ,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,QAA5B,CAAD,CAAN,CAA8CC,UAA9C;IACD,CAFY,CAAb;EAGD,CApBG,CAAJ;AAqBD,CA1EO,CAAR"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/index.js.map b/node_modules/react-native-mask-text/lib/module/index.js.map
index 4c9fe01..9801eb0 100644
--- a/node_modules/react-native-mask-text/lib/module/index.js.map
+++ b/node_modules/react-native-mask-text/lib/module/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["index.ts"],"names":["MaskedText","MaskedTextInput","mask","unMask"],"mappings":"AAAA,SAASA,UAAT,QAA4C,yBAA5C;AACA,SACEC,eADF,QAGO,8BAHP;AAKA,SAASC,IAAT,EAAeC,MAAf,QAA6B,cAA7B;AAEA,SAASH,UAAT,EAAqBC,eAArB,EAAsCC,IAAtC,EAA4CC,MAA5C","sourcesContent":["import { MaskedText, MaskedTextProps } from './components/MaskedText'\nimport {\n  MaskedTextInput,\n  MaskedTextInputProps,\n} from './components/MaskedTextInput'\n\nimport { mask, unMask } from './utils/mask'\n\nexport { MaskedText, MaskedTextInput, mask, unMask }\n\nexport type { MaskedTextProps, MaskedTextInputProps }\n"]}
\ No newline at end of file
+{"version":3,"names":["MaskedText","MaskedTextInput","mask","unMask"],"sources":["index.ts"],"sourcesContent":["import { MaskedText, MaskedTextProps } from './components/MaskedText'\nimport {\n  MaskedTextInput,\n  MaskedTextInputProps,\n} from './components/MaskedTextInput'\n\nimport { mask, unMask } from './utils/mask'\n\nexport { MaskedText, MaskedTextInput, mask, unMask }\n\nexport type { MaskedTextProps, MaskedTextInputProps }\n"],"mappings":"AAAA,SAASA,UAAT,QAA4C,yBAA5C;AACA,SACEC,eADF,QAGO,8BAHP;AAKA,SAASC,IAAT,EAAeC,MAAf,QAA6B,cAA7B;AAEA,SAASH,UAAT,EAAqBC,eAArB,EAAsCC,IAAtC,EAA4CC,MAA5C"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/utils/addPlaceholder.js.map b/node_modules/react-native-mask-text/lib/module/utils/addPlaceholder.js.map
index 27cd470..991027f 100644
--- a/node_modules/react-native-mask-text/lib/module/utils/addPlaceholder.js.map
+++ b/node_modules/react-native-mask-text/lib/module/utils/addPlaceholder.js.map
@@ -1 +1 @@
-{"version":3,"sources":["addPlaceholder.ts"],"names":["DIGIT","ALPHA","ALPHANUM","addPlaceholder","output","index","placeholder","newIndex","length"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,KAAhB,EAAuBC,QAAvB,QAAuC,aAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CACEC,MADF,EAEEC,KAFF,EAGEC,WAHF,EAIY;AACV,OAAK,IAAIC,QAAQ,GAAGF,KAApB,EAA2BE,QAAQ,GAAGH,MAAM,CAACI,MAA7C,EAAqDD,QAAQ,EAA7D,EAAiE;AAC/D,QACEH,MAAM,CAACG,QAAD,CAAN,KAAqBP,KAArB,IACAI,MAAM,CAACG,QAAD,CAAN,KAAqBN,KADrB,IAEAG,MAAM,CAACG,QAAD,CAAN,KAAqBL,QAHvB,EAIE;AACA;AACAE,MAAAA,MAAM,CAACG,QAAD,CAAN,GAAmBD,WAAnB;AACD;AACF;;AACD,SAAOF,MAAP;AACD;;AAED,eAAeD,cAAf","sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\n\n/**\n * function addPlaceholder\n * @param {string[]} output\n * @param {number} index\n * @param {string} placeholder\n * @returns {string[]}\n */\nfunction addPlaceholder(\n  output: string[],\n  index: number,\n  placeholder: string\n): string[] {\n  for (let newIndex = index; newIndex < output.length; newIndex++) {\n    if (\n      output[newIndex] === DIGIT ||\n      output[newIndex] === ALPHA ||\n      output[newIndex] === ALPHANUM\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      output[newIndex] = placeholder\n    }\n  }\n  return output\n}\n\nexport default addPlaceholder\n"]}
\ No newline at end of file
+{"version":3,"names":["DIGIT","ALPHA","ALPHANUM","addPlaceholder","output","index","placeholder","newIndex","length"],"sources":["addPlaceholder.ts"],"sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\n\n/**\n * function addPlaceholder\n * @param {string[]} output\n * @param {number} index\n * @param {string} placeholder\n * @returns {string[]}\n */\nfunction addPlaceholder(\n  output: string[],\n  index: number,\n  placeholder: string\n): string[] {\n  for (let newIndex = index; newIndex < output.length; newIndex++) {\n    if (\n      output[newIndex] === DIGIT ||\n      output[newIndex] === ALPHA ||\n      output[newIndex] === ALPHANUM\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      output[newIndex] = placeholder\n    }\n  }\n  return output\n}\n\nexport default addPlaceholder\n"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,KAAhB,EAAuBC,QAAvB,QAAuC,aAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CACEC,MADF,EAEEC,KAFF,EAGEC,WAHF,EAIY;EACV,KAAK,IAAIC,QAAQ,GAAGF,KAApB,EAA2BE,QAAQ,GAAGH,MAAM,CAACI,MAA7C,EAAqDD,QAAQ,EAA7D,EAAiE;IAC/D,IACEH,MAAM,CAACG,QAAD,CAAN,KAAqBP,KAArB,IACAI,MAAM,CAACG,QAAD,CAAN,KAAqBN,KADrB,IAEAG,MAAM,CAACG,QAAD,CAAN,KAAqBL,QAHvB,EAIE;MACA;MACAE,MAAM,CAACG,QAAD,CAAN,GAAmBD,WAAnB;IACD;EACF;;EACD,OAAOF,MAAP;AACD;;AAED,eAAeD,cAAf"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/utils/constants.js.map b/node_modules/react-native-mask-text/lib/module/utils/constants.js.map
index 6ba53e1..2f12465 100644
--- a/node_modules/react-native-mask-text/lib/module/utils/constants.js.map
+++ b/node_modules/react-native-mask-text/lib/module/utils/constants.js.map
@@ -1 +1 @@
-{"version":3,"sources":["constants.ts"],"names":["DIGIT","ALPHA","ALPHANUM"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,GAAd;AACP,OAAO,MAAMC,KAAK,GAAG,GAAd;AACP,OAAO,MAAMC,QAAQ,GAAG,GAAjB","sourcesContent":["export const DIGIT = \"9\";\nexport const ALPHA = \"A\";\nexport const ALPHANUM = \"S\";\n"]}
\ No newline at end of file
+{"version":3,"names":["DIGIT","ALPHA","ALPHANUM"],"sources":["constants.ts"],"sourcesContent":["export const DIGIT = \"9\";\nexport const ALPHA = \"A\";\nexport const ALPHANUM = \"S\";\n"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,GAAd;AACP,OAAO,MAAMC,KAAK,GAAG,GAAd;AACP,OAAO,MAAMC,QAAQ,GAAG,GAAjB"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/utils/mask.js.map b/node_modules/react-native-mask-text/lib/module/utils/mask.js.map
index eb19e55..2ce5b23 100644
--- a/node_modules/react-native-mask-text/lib/module/utils/mask.js.map
+++ b/node_modules/react-native-mask-text/lib/module/utils/mask.js.map
@@ -1 +1 @@
-{"version":3,"sources":["mask.ts"],"names":["BigNumber","toPattern","unMask","value","type","unMaskedValue","replace","number","parseInt","trimStart","toString","masker","pattern","options","currencyMasker","prefix","decimalSeparator","groupSeparator","precision","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","suffix","precisionDivider","repeat","formatter","bigNumber","config","FORMAT","toFormat","multimasker","patterns","reduce","memo","length","mask","String"],"mappings":"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","sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"]}
\ No newline at end of file
+{"version":3,"names":["BigNumber","toPattern","unMask","value","type","unMaskedValue","replace","number","parseInt","trimStart","toString","masker","pattern","options","currencyMasker","prefix","decimalSeparator","groupSeparator","precision","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","suffix","precisionDivider","repeat","formatter","bigNumber","config","FORMAT","toFormat","multimasker","patterns","reduce","memo","length","mask","String"],"sources":["mask.ts"],"sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/utils/mask.test.js.map b/node_modules/react-native-mask-text/lib/module/utils/mask.test.js.map
index b404fea..0d399fe 100644
--- a/node_modules/react-native-mask-text/lib/module/utils/mask.test.js.map
+++ b/node_modules/react-native-mask-text/lib/module/utils/mask.test.js.map
@@ -1 +1 @@
-{"version":3,"sources":["mask.test.ts"],"names":["mask","unMask","test","expected","received","expect","toBe","prefix","decimalSeparator","groupSeparator","precision"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AAEAC,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,QAAMC,QAAQ,GAAG,gBAAjB;AACA,QAAMC,QAAQ,GAAGJ,IAAI,CAAC,aAAD,EAAgB,gBAAhB,CAArB;AAEAK,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;AAC3C,QAAMC,QAAQ,GAAG,cAAjB;AACA,QAAMC,QAAQ,GAAGJ,IAAI,CAAC,cAAD,EAAiB,cAAjB,CAArB;AAEAK,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,QAAMC,QAAQ,GAAG,SAAjB;AACA,QAAMC,QAAQ,GAAGJ,IAAI,CAAC,SAAD,EAAY,SAAZ,CAArB;AAEAK,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;AAC3C,QAAMC,QAAQ,GAAG,QAAjB;AACA,QAAMC,QAAQ,GAAGJ,IAAI,CAAC,MAAD,EAAS,EAAT,EAAa,UAAb,EAAyB;AAC5CO,IAAAA,MAAM,EAAE,GADoC;AAE5CC,IAAAA,gBAAgB,EAAE,GAF0B;AAG5CC,IAAAA,cAAc,EAAE,GAH4B;AAI5CC,IAAAA,SAAS,EAAE;AAJiC,GAAzB,CAArB;AAOAL,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CAVG,CAAJ;AAYAD,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/B,QAAMC,QAAQ,GAAG,aAAjB;AACA,QAAMC,QAAQ,GAAGH,MAAM,CAAC,gBAAD,CAAvB;AAEAI,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,wBAAD,EAA2B,MAAM;AACnC,QAAMC,QAAQ,GAAG,MAAjB;AACA,QAAMC,QAAQ,GAAGH,MAAM,CAAC,QAAD,EAAW,UAAX,CAAvB;AAEAI,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ","sourcesContent":["import { mask, unMask } from './mask'\n\ntest('should mask with number digit pattern', () => {\n  const expected = '342.934.480-80'\n  const received = mask('34293448080', '999.999.999-99')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alpha pattern', () => {\n  const expected = 'react-native'\n  const received = mask('react native', 'AAAAA-AAAAAA')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alphanumeric pattern', () => {\n  const expected = 'rct-777'\n  const received = mask('rct 777', 'AAA-999')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with currency mask', () => {\n  const expected = '$59.99'\n  const received = mask('5999', '', 'currency', {\n    prefix: '$',\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    precision: 2,\n  })\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask text', () => {\n  const expected = '34293448080'\n  const received = unMask('342.934.480-80')\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask currency', () => {\n  const expected = '5999'\n  const received = unMask('$59.99', 'currency')\n\n  expect(received).toBe(expected)\n})\n"]}
\ No newline at end of file
+{"version":3,"names":["mask","unMask","test","expected","received","expect","toBe","prefix","decimalSeparator","groupSeparator","precision"],"sources":["mask.test.ts"],"sourcesContent":["import { mask, unMask } from './mask'\n\ntest('should mask with number digit pattern', () => {\n  const expected = '342.934.480-80'\n  const received = mask('34293448080', '999.999.999-99')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alpha pattern', () => {\n  const expected = 'react-native'\n  const received = mask('react native', 'AAAAA-AAAAAA')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with alphanumeric pattern', () => {\n  const expected = 'rct-777'\n  const received = mask('rct 777', 'AAA-999')\n\n  expect(received).toBe(expected)\n})\n\ntest('should mask with currency mask', () => {\n  const expected = '$59.99'\n  const received = mask('5999', '', 'currency', {\n    prefix: '$',\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    precision: 2,\n  })\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask text', () => {\n  const expected = '34293448080'\n  const received = unMask('342.934.480-80')\n\n  expect(received).toBe(expected)\n})\n\ntest('should unMask currency', () => {\n  const expected = '5999'\n  const received = unMask('$59.99', 'currency')\n\n  expect(received).toBe(expected)\n})\n"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AAEAC,IAAI,CAAC,uCAAD,EAA0C,MAAM;EAClD,MAAMC,QAAQ,GAAG,gBAAjB;EACA,MAAMC,QAAQ,GAAGJ,IAAI,CAAC,aAAD,EAAgB,gBAAhB,CAArB;EAEAK,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;EAC3C,MAAMC,QAAQ,GAAG,cAAjB;EACA,MAAMC,QAAQ,GAAGJ,IAAI,CAAC,cAAD,EAAiB,cAAjB,CAArB;EAEAK,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,uCAAD,EAA0C,MAAM;EAClD,MAAMC,QAAQ,GAAG,SAAjB;EACA,MAAMC,QAAQ,GAAGJ,IAAI,CAAC,SAAD,EAAY,SAAZ,CAArB;EAEAK,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,gCAAD,EAAmC,MAAM;EAC3C,MAAMC,QAAQ,GAAG,QAAjB;EACA,MAAMC,QAAQ,GAAGJ,IAAI,CAAC,MAAD,EAAS,EAAT,EAAa,UAAb,EAAyB;IAC5CO,MAAM,EAAE,GADoC;IAE5CC,gBAAgB,EAAE,GAF0B;IAG5CC,cAAc,EAAE,GAH4B;IAI5CC,SAAS,EAAE;EAJiC,CAAzB,CAArB;EAOAL,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CAVG,CAAJ;AAYAD,IAAI,CAAC,oBAAD,EAAuB,MAAM;EAC/B,MAAMC,QAAQ,GAAG,aAAjB;EACA,MAAMC,QAAQ,GAAGH,MAAM,CAAC,gBAAD,CAAvB;EAEAI,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ;AAOAD,IAAI,CAAC,wBAAD,EAA2B,MAAM;EACnC,MAAMC,QAAQ,GAAG,MAAjB;EACA,MAAMC,QAAQ,GAAGH,MAAM,CAAC,QAAD,EAAW,UAAX,CAAvB;EAEAI,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsBH,QAAtB;AACD,CALG,CAAJ"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/module/utils/toPattern.js.map b/node_modules/react-native-mask-text/lib/module/utils/toPattern.js.map
index 62bbe66..aab7b33 100644
--- a/node_modules/react-native-mask-text/lib/module/utils/toPattern.js.map
+++ b/node_modules/react-native-mask-text/lib/module/utils/toPattern.js.map
@@ -1 +1 @@
-{"version":3,"sources":["toPattern.ts"],"names":["DIGIT","ALPHA","ALPHANUM","addPlaceholder","toPattern","value","optionPattern","pattern","patternChars","replace","output","split","values","toString","charsValues","placeholder","undefined","charCounter","index","outputLength","length","join","match","slice","substr"],"mappings":"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","sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\nimport addPlaceholder from './addPlaceholder'\n\ntype OptionPattern = {\n  pattern: string\n  placeholder: string\n}\n\n/**\n * function toPattern\n * @param {number | string} value\n * @param {string | OptionPattern} optionPattern\n * @returns {string}\n */\nfunction toPattern(\n  value: number | string,\n  optionPattern: string | OptionPattern\n): string {\n  const pattern =\n    typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern\n  const patternChars = pattern.replace(/\\W/g, '')\n  const output = pattern.split('')\n  const values = value.toString().replace(/\\W/g, '')\n  const charsValues = values.replace(/\\W/g, '')\n  const placeholder =\n    typeof optionPattern === 'object' ? optionPattern.placeholder : undefined\n  let charCounter = 0\n  let index\n\n  const outputLength = output.length\n  for (index = 0; index < outputLength; index++) {\n    // Reached the end of input\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('')\n      }\n      if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      break\n    } else if (\n      (output[index] === DIGIT && values[charCounter].match(/[0-9]/)) ||\n      (output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/)) ||\n      (output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/))\n    ) {\n      output[index] = values[charCounter++]\n    } else if (\n      output[index] === DIGIT ||\n      output[index] === ALPHA ||\n      output[index] === ALPHANUM\n    ) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      return output.slice(0, index).join('')\n\n      // exact match for a non-magic character\n    } else if (output[index] === values[charCounter]) {\n      charCounter++\n    }\n  }\n  return output.join('').substr(0, index)\n}\n\nexport default toPattern\n"]}
\ No newline at end of file
+{"version":3,"names":["DIGIT","ALPHA","ALPHANUM","addPlaceholder","toPattern","value","optionPattern","pattern","patternChars","replace","output","split","values","toString","charsValues","placeholder","undefined","charCounter","index","outputLength","length","join","match","slice","substr"],"sources":["toPattern.ts"],"sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\nimport addPlaceholder from './addPlaceholder'\n\ntype OptionPattern = {\n  pattern: string\n  placeholder: string\n}\n\n/**\n * function toPattern\n * @param {number | string} value\n * @param {string | OptionPattern} optionPattern\n * @returns {string}\n */\nfunction toPattern(\n  value: number | string,\n  optionPattern: string | OptionPattern\n): string {\n  const pattern =\n    typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern\n  const patternChars = pattern.replace(/\\W/g, '')\n  const output = pattern.split('')\n  const values = value.toString().replace(/\\W/g, '')\n  const charsValues = values.replace(/\\W/g, '')\n  const placeholder =\n    typeof optionPattern === 'object' ? optionPattern.placeholder : undefined\n  let charCounter = 0\n  let index\n\n  const outputLength = output.length\n  for (index = 0; index < outputLength; index++) {\n    // Reached the end of input\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('')\n      }\n      if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      break\n    } else if (\n      (output[index] === DIGIT && values[charCounter].match(/[0-9]/)) ||\n      (output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/)) ||\n      (output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/))\n    ) {\n      output[index] = values[charCounter++]\n    } else if (\n      output[index] === DIGIT ||\n      output[index] === ALPHA ||\n      output[index] === ALPHANUM\n    ) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      return output.slice(0, index).join('')\n\n      // exact match for a non-magic character\n    } else if (output[index] === values[charCounter]) {\n      charCounter++\n    }\n  }\n  return output.join('').substr(0, index)\n}\n\nexport default toPattern\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/react-native-mask-text/lib/typescript/components/MaskedTextInput.d.ts b/node_modules/react-native-mask-text/lib/typescript/components/MaskedTextInput.d.ts
index 6013f38..2a9bc94 100644
--- a/node_modules/react-native-mask-text/lib/typescript/components/MaskedTextInput.d.ts
+++ b/node_modules/react-native-mask-text/lib/typescript/components/MaskedTextInput.d.ts
@@ -8,7 +8,6 @@ export interface MaskedTextInputProps extends TIProps {
     options?: MaskOptions;
     defaultValue?: string;
     onChangeText: (text: string, rawText: string) => void;
-    inputAccessoryView?: JSX.Element;
 }
 export declare const MaskedTextInputComponent: ForwardRefRenderFunction<TextInput, MaskedTextInputProps>;
 export declare const MaskedTextInput: React.ForwardRefExoticComponent<MaskedTextInputProps & React.RefAttributes<TextInput>>;
